/* Generated by AN DISI Unibo */ 
package it.unibo.filter

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Filter ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var V = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						subscribeToLocalActor("datasource") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="handleData",cond=whenEvent("data"))
				}	 
				state("handleData") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("value(V)"), Term.createTerm("value(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  V = payloadArg(0).toInt()  
								CommUtils.outmagenta("$name handles $V")
								if(  V < 40   
								 ){emitLocalStreamEvent("data", "value($V)" ) 
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="handleData",cond=whenEvent("data"))
				}	 
			}
		}
} 
