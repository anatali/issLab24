/* Generated by AN DISI Unibo */ 
package it.unibo.worker

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Worker ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var n = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(2000) 
						connectToMqttBroker( "tcp://broker.hivemq.com" )
						 var M = "${name}_hello_${n++}" 
						CommUtils.outblack(M)
						//val m = MsgUtil.buildEvent(name, "write", "write($M)" ) 
						publish(MsgUtil.buildEvent(name,"write","write($M)").toString(), "xxx" )   
						delay(1000) 
						 var M1 = "${name}_hello_${n++}" 
						//val m = MsgUtil.buildEvent(name, "write", "write($M1)" ) 
						publish(MsgUtil.buildEvent(name,"write","write($M1)").toString(), "xxx" )   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="finish", cond=doswitch() )
				}	 
				state("finish") { //this:State
					action { //it:State
						//terminate(0)
						context!!.removeInternalActor(myself)
						CommUtils.outmagenta("$name BYE")
						delay(3000) 
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
