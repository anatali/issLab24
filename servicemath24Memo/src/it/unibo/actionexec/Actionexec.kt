/* Generated by AN DISI Unibo */ 
package it.unibo.actionexec

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Actionexec ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val math = utils.MathUtils.create()
		 var T0     = 0L 
			   var ReqArg = 0L
		       var Sender = ""
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t010",targetState="work",cond=whenRequest("dofibo"))
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("dofibo(N)"), Term.createTerm("dofibo(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								   
												ReqArg  = payloadArg(0).toLong() 
								 				Sender  = currentMsg.msgSender() 
								 T0 = getCurrentTime()  
								request("getfibo", "getfibo($ReqArg)" ,"storage" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="sendAnswerToCaller",cond=whenReply("getfiboanswer"))
				}	 
				state("sendAnswerToCaller") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("getfiboanswer(N,V)"), Term.createTerm("getfiboanswer(N,V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val TF  = getDuration(T0) 				
												val F   = payloadArg(1)
												val SOUT = "$name, ${payloadArg(0)} / fibo($ReqArg), $F, time=$TF" 
								CommUtils.outyellow("$name | check $ReqArg==${payloadArg(0)}")
								forward("show", "show($SOUT)" ,"display" ) 
								answer("dofibo", "fibodone", "fibodone($Sender,$ReqArg,$F,$TF)"   )  
						}
						//terminate(0)
						context!!.removeInternalActor(myself)
						 var anames = sysUtil.getAllActorNames(context!!.name)  
						CommUtils.outblack("$name | AFTER: $anames")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
