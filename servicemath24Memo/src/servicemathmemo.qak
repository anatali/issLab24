System /*-msglog  -trace */ servicemathmemo  
//mqttBroker "broker.hivemq.com" : 1883 eventTopic "servicetopic"

//Messages for the application 
Request dofibo   : dofibo(N)
Reply   fibodone : fibodone( CALLER,N,RESULT,TIME ) for dofibo
         

//Messages for storage
Request getfibo : getfibo(N)
Reply   getfiboanswer : getfiboanswer(N,V) for getfibo //LAST=0 => V=fibo(N) else V=fibo(LAST)

      
 
/*
 * Il servizio arriva fino a un valore di 9223372036854775807
 * che implica 0 <= n <= 92
 */
Context ctxservice ip [host="localhost" port=8011]  

/* 
QActor display context ctxservice {  //withobj d using "utils.DisplayObj.create()"
 	State s0 initial{		
	}
	Transition t0 whenMsg out  -> view
	              whenMsg show -> view
	
	State view{
		printCurrentMessage color yellow
		[# val SOUT = "${currentMsg.msgContent()}" #] //inizia con out o con show
		println("$name | $SOUT ") color yellow
		updateResource [# "$SOUT" #]
	} 
	Transition t0 whenMsg out  -> view
	              whenMsg show -> view

}
*/

/*

 
QActor caller context ctxservice {  
	[#  var SOUT = ""
	#] 
 	State init initial { 
  		delay 6000
		[# SOUT = "$name | starts"  #]
//		forward display -m out : out($SOUT)
 		request servicemath -m dofibo : dofibo(43)
 		delay 500
 		request servicemath -m dofibo : dofibo(93)
	}	 
	Transition t0 whenReply fibodone -> fiboanswer
	
	State fiboanswer{
		printCurrentMessage color magenta
		onMsg(fibodone : fibodone( CALLER,V,R,T) ){
			[# SOUT = "$name | fiboanswer for ${payloadArg(1)} from ${payloadArg(0)}=${payloadArg(2)} time=${payloadArg(3)}" #]
//            forward display -m out : out($SOUT)
		}   
	}
	Transition t0 whenReply fibodone -> fiboanswer
}

 */
QActor storage context ctxservice withobj math using "MathUtils.create()"{	 
	[# val engine = Prolog()			
	#]
	State s0 initial { 
		println("$name | STARTS ") color green
		[# math.loadTheory("storage.pl", engine) #]
	}	
	Transition t0 whenRequest getfibo -> elab
	
	State elab{
		onMsg( getfibo : getfibo(N) ){
			[# val K = payloadArg(0).toLong() 
			   val R = math.fiboWithMemo( K,engine )
			   math.show( engine )
			   math.saveTheory("xxx.pl", engine) 
			#]
			replyTo getfibo with getfiboanswer : getfiboanswer($K,$R)
		}
	}
	Transition t0 whenRequest getfibo -> elab
	
}


/*
 * SERVICE 
 */
QActor servicemath context ctxservice {	 
	State init initial { 
		println("$name  STARTS ") color blue
	}	
	Transition t0 whenRequest dofibo -> work
	 
	State work{
		onMsg( dofibo : dofibo(N) ){
			[#  
			   var ReqId  = currentMsg.msgId()
			   var ReqArg = payloadArg(0).toLong()
			   var Sender = currentMsg.msgSender()
			#]
			[# val SOUT = "$name | $ReqId $ReqArg Sender=$Sender" #]
			println("$SOUT") color blue
			updateResource [# SOUT #]
			//forward display -m out  : out(  $SOUT  )
			if[# ReqArg < 0 || ReqArg > 92 #]{
				[# val Wrong = "-1" #]
				replyTo dofibo with fibodone : fibodone($Sender,$ReqArg,$Wrong,0) //$Sender, $ReqArg, $F, $TF
			}
			else { delegateCurrentMsgTo actionexec }
			//create actionexecutor requestbycreator doaction : doaction ( $ReqId,$ReqArg,$Sender,name ) 
		}
	}   
	Transition t0   whenRequest dofibo    -> work

 }

QActor actionexec  context ctxservice dynamicOnly{ //withobj math using "MathUtils.create()" 
	[# var T0     = 0L 
	   var ReqArg = 0L
       var Sender = "" 
    #] 
	
	State init initial {
		//println("$name | STARTS ")  color cyan
    }	 
    Transition t0 whenRequest dofibo -> work
	
	State work{
		printCurrentMessage color green
		onMsg( dofibo : dofibo( N ) ){
			[#   
				ReqArg  = payloadArg(0).toLong() 
 				Sender  = currentMsg.msgSender() 
			#]  
			//println("$name | work N=$N ${sysUtil.curThread()}") color blue
			
			[# T0 = getCurrentTime() #]
			request storage -m getfibo : getfibo($ReqArg)
		} 
	} 
	Transition t0 whenReply getfiboanswer -> sendAnswerToCaller
	
	State sendAnswerToCaller{
		onMsg( getfiboanswer : getfiboanswer(N,V) ){
			[#
				val TF  = getDuration(T0) 				
				val F   = payloadArg(1)
			#]
			println("$name | check $ReqArg F=$F}") color yellow
//			forward display -m show : show($SOUT)
			replyTo dofibo with fibodone : fibodone($Sender, $ReqArg, $F, $TF)
		}
		terminate 0
 
		[# var anames = sysUtil.getAllActorNames(context!!.name) #]
		println("$name | AFTER: $anames")
	}
 
 } 

QActor dummy context ctxservice {
	State init initial { 
		println("$name  STARTS ") color blue
		delegate dofibo to servicemath
	}  
}
 
Facade f port 8088 usingactor servicemath inctx ctxservice  
                   appl "unibo.servicefacade24.Servicefacade24Application" 
                   UserLibs -f "servicefacade24-1.0" -f "servicefacade24-1.0-plain"

