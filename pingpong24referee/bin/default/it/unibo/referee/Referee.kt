/* Generated by AN DISI Unibo */ 
package it.unibo.referee

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Referee ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var N = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name STARTS ")
						observeResource("127.0.0.1","8014","ctxping","ping","ballview")
						observeResource("127.0.0.1","8015","ctxpong","pong","ballview")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="emitStart", cond=doswitch() )
				}	 
				state("emitStart") { //this:State
					action { //it:State
						CommUtils.outcyan("$name emits start ")
						emit("startgame", "startgame(oK)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_emitStart", 
				 	 					  scope, context!!, "local_tout_"+name+"_emitStart", 1000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t00",targetState="emitStart",cond=whenTimeout("local_tout_"+name+"_emitStart"))   
					transition(edgeName="t01",targetState="handlegame",cond=whenDispatch("ballview"))
					transition(edgeName="t02",targetState="handleConnect",cond=whenRequest("obsconnect"))
				}	 
				state("handleConnect") { //this:State
					action { //it:State
						CommUtils.outred("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						answer("obsconnect", "obsconnected", "obsconnected(done)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="handlegame",cond=whenDispatch("ballview"))
				}	 
				state("handlegame") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 N++  
						if(  N == 5  
						 ){CommUtils.outcyan("$name emits stop ")
						emit("stopgame", "stopgamegame(oK)" ) 
						}
						if( checkMsgContent( Term.createTerm("ball(N)"), Term.createTerm("ball(0)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("endgame", "endgame(ok)" ,name ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handlegame",cond=whenDispatch("ballview"))
					transition(edgeName="t05",targetState="handleConnect",cond=whenRequest("obsconnect"))
					transition(edgeName="t06",targetState="checkRequest",cond=whenDispatch("endgame"))
				}	 
				state("checkRequest") { //this:State
					action { //it:State
						CommUtils.outred("$name checkRequest ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_checkRequest", 
				 	 					  scope, context!!, "local_tout_"+name+"_checkRequest", 1000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t07",targetState="endgame",cond=whenTimeout("local_tout_"+name+"_checkRequest"))   
					transition(edgeName="t08",targetState="handleRequest",cond=whenRequest("info"))
				}	 
				state("handleRequest") { //this:State
					action { //it:State
						CommUtils.outred("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						answer("info", "obsinfo", "obsinfo($N)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="endgame", cond=doswitch() )
				}	 
				state("endgame") { //this:State
					action { //it:State
						delay(500) 
						CommUtils.outred("$name BYE ")
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
