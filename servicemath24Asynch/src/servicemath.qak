System /*-msglog  -trace */ -trace servicemath  
mqttBroker "broker.hivemq.com" : 1883 eventTopic "servicemathouttopic"
 
//Messages for the application 
Request dofibo   : dofibo(N) "to service"
Reply   fibodone : fibodone( CALLER,N,RESULT,TIME ) for dofibo 
  
//Messages for the display 
//Dispatch out  : out(S) 
//Dispatch show  : show(S)         
 
Event out  : out(S) 

Context ctxservice ip [host="localhost" port=8011]  

/* 
QActor display context ctxservice {  //withobj d using "utils.DisplayObj.create()"
 	State s0 initial{		
	}
	Transition t0 whenMsg out -> handleout
	
	State handleout{
		printCurrentMessage color yellow
		[# val SOUT = "${currentMsg.msgContent()}" #]
		//[# d.write( SOUT ) #]
		c	
	} 
	Transition t0 whenMsg out -> handleout
}
*/

/*
 * SERVICE 
 */
QActor servicemath context ctxservice {
	 
	State init initial { 
		println("$name  STARTS ") color blue
		
	}	
	Transition t0 whenRequest dofibo -> work
	 
	State work{
		 
//		onMsg( dofibo : dofibo(N) ){
//			[#  
//			   var ReqId  = currentMsg.msgId()
//			   var ReqArg = payloadArg(0)
//			   var Sender = currentMsg.msgSender()
//			#]
//			[# val SOUT = "$name | $ReqId $ReqArg Sender=$Sender" #]
//			println("$SOUT") color blue
//			//forward display -m out  : out(  $SOUT  )
            //println("working on $currentMsg") color yellow
            updateResource [# "working on $currentMsg" #]
            publish "servicemathouttopic" -m  out : out(servicemath)
			delegateCurrentMsgTo actionexec
            //emit out : out(servicemathdelegated)
			//create actionexecutor requestbycreator doaction : doaction ( $ReqId,$ReqArg,$Sender,name ) 
//		}
	}  
	Transition t0   whenRequest dofibo    -> work

 }

QActor actionexec  context ctxservice withobj math using "MathUtils.create()" dynamicOnly{
	[# var SOUT="todo" #]
	State init initial {
		//println("$name | STARTS ")  color cyan
    }	 
    Transition t0 whenRequest dofibo -> work
	
	State work{
		printCurrentMessage color cyan
		emit out : out(actionexec)
		onMsg( dofibo : dofibo( N ) ){
			[#   
				var ReqArg  = payloadArg(0) 
 				var Sender  = currentMsg.msgSender() 
			#]  
			//println("$name | work N=$N ${sysUtil.curThread()}") color blue
			[# 
			   val T0 = getCurrentTime()  
 			   var F  = math.fibo( ReqArg.toInt() )  
 			   val TF = getDuration(T0)  
    		   SOUT   = "fibovalue($ReqArg , $F,  $TF)" 
			#]
 			println("$SOUT") color cyan 
			//forward display -m out : out($SOUT)
			updateResource [# "$SOUT" #]
			replyTo dofibo with fibodone : fibodone($Sender, $ReqArg, $F, $TF)
 			   
			terminate 0
 
			[# var anames = sysUtil.getAllActorNames(context!!.name) #]
			println("$name | AFTER: $anames")
		} 
	} 
 
 }

 
 
Facade f port 8088 usingactor servicemath inctx ctxservice  
                   appl "unibo.servicefacade24.Servicefacade24Application" 
                   UserLibs -f "servicefacade24-1.0" -f "servicefacade24-1.0-plain"
	
