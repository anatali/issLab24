/* Generated by AN DISI Unibo */ 
package it.unibo.nor_r

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Nor_r ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var Value    = 1 
			   var NewValue = 0
			   var CurR     = 0
			   var CurQ1    = 0
			   	   
			   fun norf( a:Int,b:Int ) : Int{
			   	 if( a == 0 && b == 0) return 1
			   	 else return 0
			   }	 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="elabInputR",cond=whenDispatch("r"))
					transition(edgeName="t01",targetState="elabInputQ1",cond=whenDispatch("q1"))
				}	 
				state("elabout") { //this:State
					action { //it:State
						 NewValue = norf(CurR,CurQ1)  
						if(  NewValue !==  Value  
						 ){forward("q", "q($NewValue)" ,"nor_s" ) 
						 Value=NewValue  
						}
						CommUtils.outmagenta("$name | $Value  ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="elabInputR",cond=whenDispatch("r"))
					transition(edgeName="t03",targetState="elabInputQ1",cond=whenDispatch("q1"))
				}	 
				state("elabInputR") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("r(X)"), Term.createTerm("r(0)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurR = 0   
						}
						if( checkMsgContent( Term.createTerm("r(X)"), Term.createTerm("r(1)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurR = 1   
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="elabout", cond=doswitch() )
				}	 
				state("elabInputQ1") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("q1(X)"), Term.createTerm("q1(0)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurQ1 = 0   
						}
						if( checkMsgContent( Term.createTerm("q1(X)"), Term.createTerm("q1(1)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurQ1 = 1   
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="elabout", cond=doswitch() )
				}	 
			}
		}
} 
