/* Generated by AN DISI Unibo */ 
package it.unibo.latch

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Latch ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var Seton   = false 
			   var Reseton = false	
			   var CurVal  = "1"
			   var docmd   = false  //discrimine tra richieste e comandi
			   /*
			    * Alla ricezione di un evento latchval emesso da nor_r
			    * si invia una risposta solo se docmd   = false
			    */
			   
			   fun input(S:Boolean, R:Boolean) : String{
			   	  //CommUtils.outgreen("input $S,$R - OLD: $Seton,$Reseton")
			   	  if( S == Seton && R == Reseton ) return "nop" //no new input	   	  
			   	  
			   	  if( S && R ) return "error"
			   	  if( S && !Seton) return "seton" 
			   	  if( !S && Seton) return "setoff" 
			   	  if( R && ! Reseton) return "reseton" 
			   	  if( !R && Reseton) return "resetoff" 
			   	  
			   	  return "nop"
			   }
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | START")
						subscribeToLocalActor("nor_r") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						updateResourceRep( "latchval($name,$CurVal)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="handleqchange",cond=whenEvent("qchange"))
					transition(edgeName="t09",targetState="hanlelatchdo",cond=whenRequest("latchdo"))
					transition(edgeName="t010",targetState="handleset",cond=whenDispatch("set"))
					transition(edgeName="t011",targetState="handlereset",cond=whenDispatch("reset"))
				}	 
				state("handleset") { //this:State
					action { //it:State
						 docmd = true  
						if( checkMsgContent( Term.createTerm("set(V)"), Term.createTerm("set(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val V = payloadArg(0); val S = V == "1"   
								if(  S && Reseton  
								 ){}
								else
								 {if(  S != Seton  
								  ){ docmd = true  
								 forward("s", "s($V)" ,"nor_s" ) 
								  Seton=S  
								 }
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handlereset") { //this:State
					action { //it:State
						 docmd = true  
						if( checkMsgContent( Term.createTerm("reset(V)"), Term.createTerm("reset(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val V = payloadArg(0); val R = V == "1"   
								if(  R && Seton  
								 ){}
								else
								 {if(  R != Reseton  
								  ){forward("r", "r($V)" ,"nor_r" ) 
								  Reseton = R  
								 }
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("hanlelatchdo") { //this:State
					action { //it:State
						 docmd = false  
						if( checkMsgContent( Term.createTerm("latchdo(S,R)"), Term.createTerm("latchdo(S,R)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val S    = payloadArg(0) == "1" 
								    		   val R    = payloadArg(1) == "1"
								    		   var Todo = "nop";    		  
								if(  S == Seton && R == Reseton  
								 ){answer("latchdo", "latchval", "latchval($CurVal)"   )  
								}
								else
								 { Todo = input(S,R)   
								 if(  Todo == "nop"  
								  ){answer("latchdo", "latchval", "latchval($CurVal)"   )  
								 }
								 if(  Todo == "seton"  
								  ){forward("s", "s(1)" ,"nor_s" ) 
								  Seton=true  
								 }
								 if(  Todo == "setoff"  
								  ){forward("s", "s(0)" ,"nor_s" ) 
								  Seton=false  
								 answer("latchdo", "latchval", "latchval($CurVal)"   )  
								 }
								 if(  Todo == "reseton"  
								  ){forward("r", "r(1)" ,"nor_r" ) 
								  Reseton=true  
								 }
								 if(  Todo == "resetoff"  
								  ){forward("r", "r(0)" ,"nor_r" ) 
								  Reseton=false  
								 answer("latchdo", "latchval", "latchval($CurVal)"   )  
								 }
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleqchange") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("latchval(V)"), Term.createTerm("latchval(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val V = payloadArg(0); val VS= ""+V; CurVal = VS  
								if(   ! docmd   
								 ){answer("latchdo", "latchval", "latchval($V)"   )  
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 
