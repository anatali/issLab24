/* Generated by AN DISI Unibo */ 
package it.unibo.nor_s

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Nor_s ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var Value    = 0  
			   var NewValue = 0
			   var CurS     = 0
			   var CurQ     = 1
		 	   
			   fun norf( a:Int,b:Int ) : Int{
			   	 if( a == 0 && b == 0) return 1
			   	 else return 0
			   }		 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(100) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="elabInputS",cond=whenDispatch("s"))
					transition(edgeName="t05",targetState="elabInputQ",cond=whenDispatch("q"))
				}	 
				state("elabout") { //this:State
					action { //it:State
						 NewValue = norf(CurS,CurQ)  
						if(  NewValue !==  Value  
						 ){forward("q1", "q1($NewValue)" ,"nor_r" ) 
						 Value=NewValue  
						}
						CommUtils.outblue("$name | $Value  ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="elabInputS",cond=whenDispatch("s"))
					transition(edgeName="t07",targetState="elabInputQ",cond=whenDispatch("q"))
				}	 
				state("elabInputS") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("s(X)"), Term.createTerm("s(0)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurS = 0   
						}
						if( checkMsgContent( Term.createTerm("s(X)"), Term.createTerm("s(1)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurS = 1   
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="elabout", cond=doswitch() )
				}	 
				state("elabInputQ") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("q(X)"), Term.createTerm("q(0)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurQ = 0  
						}
						if( checkMsgContent( Term.createTerm("q(X)"), Term.createTerm("q(1)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurQ = 1   
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="elabout", cond=doswitch() )
				}	 
			}
		}
} 
