/* Generated by AN DISI Unibo */ 
package it.unibo.nor

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Nor ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "work"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var Value = 0 
			   var OldValue = 0
			   var CurS  = 1
			   var CurB  = 0
			   
			   fun norf( ){
			   	 if( CurS==0 && CurB==0 ) Value = 1
			   	 else Value = 0
			   }	 
		return { //this:ActionBasciFsm
				state("work") { //this:State
					action { //it:State
						CommUtils.outblue("$name | $Value  ($CurS,$CurB)")
						if(  OldValue !=  Value  
						 ){ OldValue =  Value  
						forward("a", "a($Value)" ,name ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="elabInputS",cond=whenDispatch("s"))
					transition(edgeName="t01",targetState="elabInputB",cond=whenDispatch("a"))
				}	 
				state("elabInputS") { //this:State
					action { //it:State
						CommUtils.outblack("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("s(X)"), Term.createTerm("s(0)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurS = 0  
						}
						if( checkMsgContent( Term.createTerm("s(X)"), Term.createTerm("s(1)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurS = 1  
						}
						 norf()  
						delay(200) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("elabInputB") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("a(X)"), Term.createTerm("a(0)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurB = 0  
						}
						if( checkMsgContent( Term.createTerm("a(X)"), Term.createTerm("a(1)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurB = 1  
						}
						 norf()  
						delay(200) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 
