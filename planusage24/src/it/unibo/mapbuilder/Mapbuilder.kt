/* Generated by AN DISI Unibo */ 
package it.unibo.mapbuilder

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024
import unibo.planner23.*

class Mapbuilder ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "activate"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
		val MaxNumStep  = 6
		var NumStep     = 0
		var stepok      = 0
		val planner     = Planner23Util()
		return { //this:ActionBasciFsm
				state("activate") { //this:State
					action { //it:State
						 NumStep     = 0;
						           planner.initAI()
						           
						connectToMqttBroker( "wss://test.mosquitto.org:8081" )
						request("engage", "engage($MyName,350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="coverNextColumn",cond=whenReply("engagedone"))
					transition(edgeName="t01",targetState="waittoengage",cond=whenReply("engagerefused"))
				}	 
				state("waittoengage") { //this:State
					action { //it:State
						CommUtils.outred("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("coverNextColumn") { //this:State
					action { //it:State
						CommUtils.outblue("$name | coverNextColumn")
						request("step", "step(350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="coverColumn",cond=whenReply("stepdone"))
					transition(edgeName="t03",targetState="backHome",cond=whenReply("stepfailed"))
				}	 
				state("coverColumn") { //this:State
					action { //it:State
						 stepok = stepok + 1
						   		   planner.updateMap(  "w", "" ) 		
						CommUtils.outblack("coverColumn stepok=$stepok NumStep=$NumStep")
						delay(300) 
						request("step", "step(340)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="coverColumn",cond=whenReply("stepdone"))
					transition(edgeName="t05",targetState="backHome",cond=whenReply("stepfailed"))
				}	 
				state("backHome") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						  planner.updateMapObstacleOnCurrentDirection()
						CommUtils.outblack("backHome")
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						  planner.updateMap(  "l", "" )   
						delay(300) 
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						  planner.updateMap(  "l", "" )   
						delay(300) 
						 planner.showCurrentRobotState()  
						 val MAP = planner.getMapOneLine()  
						//val m = MsgUtil.buildEvent(name, "mapinfo", "mapinfo($MAP)" ) 
						publish(MsgUtil.buildEvent(name,"mapinfo","mapinfo($MAP)").toString(), "unibodisiplan" )   
						request("step", "step(340)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="gotoHome",cond=whenReply("stepdone"))
					transition(edgeName="t07",targetState="turnAndStep",cond=whenReply("stepfailed"))
				}	 
				state("gotoHome") { //this:State
					action { //it:State
						 planner.updateMap(  "w", "" ) 
						 		   stepok = stepok - 1 
						CommUtils.outblack("gotoHome stepok=$stepok")
						delay(300) 
						request("step", "step(340)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="gotoHome",cond=whenReplyGuarded("stepdone",{ stepok > 0  
					}))
					transition(edgeName="t09",targetState="turnAndStep",cond=whenReplyGuarded("stepdone",{ stepok == 0  
					}))
					transition(edgeName="t010",targetState="turnAndStep",cond=whenReply("stepfailed"))
				}	 
				state("turnAndStep") { //this:State
					action { //it:State
						forward("cmd", "cmd(r)" ,"basicrobot" ) 
						  planner.updateMap(  "r", "" )   
						delay(300) 
						request("step", "step(340)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="posForNextColumn",cond=whenReply("stepdone"))
					transition(edgeName="t012",targetState="endOfWork",cond=whenReply("stepfailed"))
				}	 
				state("posForNextColumn") { //this:State
					action { //it:State
						 planner.updateMap(  "w", "" )  
						forward("cmd", "cmd(r)" ,"basicrobot" ) 
						  planner.updateMap(  "r", "" )   
						CommUtils.outblack("posForNextColumn stepok=$stepok")
						 planner.showCurrentRobotState()  
						delay(1300) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="coverNextColumn", cond=doswitch() )
				}	 
				state("endOfWork") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						  //planner.updateMapObstacleOnCurrentDirection() 
						   			planner.showMap()
						   			planner.saveRoomMap("map2019")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
