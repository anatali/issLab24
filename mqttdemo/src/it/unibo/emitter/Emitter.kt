/* Generated by AN DISI Unibo */ 
package it.unibo.emitter

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Emitter ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(2000) 
						CommUtils.outblue("$name | emet event ")
						emit("sonardata", "sonardata(120)" ) 
						delay(1000) 
						CommUtils.outblue("$name | publish event on mytopic")
						//val m = MsgUtil.buildEvent(name, "sonardata", "sonardata(10)" ) 
						publish(MsgUtil.buildEvent(name,"sonardata","sonardata(10)").toString(), "mytopic" )   
						delay(1000) 
						CommUtils.outblue("$name | publish dispatch on mytopic")
						 val msg = MsgUtil.buildDispatch("emitter", "cmd","cmd(l)","perceiver")
									publish(msg.toString(),"mytopic")
						delay(2000) 
						CommUtils.outblue("$name | BYE")
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
