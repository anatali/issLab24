/*
 * This model gives essential and relevant information about
 * 	     STRUCTURE, INTERACTION and BEHAVIOR
 * about the system
 * 
 * The model is EXECUTABLE
 * 
 * VEDI IL PROGETTO unibo.sonarqak23
 */

 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io
	//"tcp://broker.hivemq.com" 

/*
 * Declares the messages and the events in explicit way
 */
System /*-msglog*/  sonar  
//mqttBroker "broker.hivemq.com" :  1883 eventTopic "unibo/nat/sonar/events"

Dispatch simulatorstart     : simulator(V)  
Event    sonarRobot 		: sonar( V )   //emitted by rx.sonarSimulator or sensors.sonarHCSR04SupportActor	
Event    obstacle           : obstacle(V)
Event    sonardata          : distance( V ) 

Context ctxsonar    ip [host="localhost"   port=8068  ] 	 	 
Context ctxradargui ip [ host= "127.0.0.1" port= 8038 ]  

//DATA SOURCES
CodedQActor sonarsimulator  context ctxsonar className "rx.sonarSimulator"  
//CodedQActor sonardatasource context ctxsonar className "sensors.sonarHCSR04SupportActor"

//Filters
CodedQActor datalogger     context ctxsonar className "rx.dataLogger"
CodedQActor datacleaner    context ctxsonar className "rx.dataCleaner"
CodedQActor distancefilter context ctxsonar className "rx.distanceFilter"
ExternalQActor radargui context ctxradargui

QActor sonar context ctxsonar {     
[# val simulate = true
   lateinit var firstActorInPipe : ActorBasic 
#]
 	State s0 initial {  		 
 		discardMsg On	
 		  	  
  		println("sonar started")  
		//CREATE THE PIPE
		[#  if( simulate ) firstActorInPipe = sysUtil.getActor("sonarsimulator")!!  //generates simulated data
			//else firstActorInPipe = sysUtil.getActor("sonardatasource")!! 			//generates REAL data
 			  
 			//firstActorInPipe.
			//subscribe("datacleaner"). 		//removes 'wrong' data''
			//subscriber("datalogger").		    //logs (shows) the data generated by the sonar
  			//subscribeLocalActor("sonar").				//handles sonarRobot but does not propagate ...
 			//subscribe("distancefilter").		//propagates the lcoal stream event obstacle
  			//subscribe("sonar")  
  			subscribeToLocalActor("distancefilter").subscribeToLocalActor("sonarsimulator")
  			 
		#]    
 		 
		//ACTIVATE THE DATA SOURCE   
		if [# simulate #]{
			forward sonarsimulator -m simulatorstart : simulatorstart(qasource)
		}
 		//else{ forward sonardatasource -m simulatorstart : simulatorstart(qasource) }
  	}  
  	  	Transition t0 whenEvent obstacle   -> handleObstacle
  	  			  whenEvent sonarRobot     -> handleEvent  
					   
/*
 * If no Transition is specified, the event obstacle is received, but discarded. See the msglog
 */  
   	State handleObstacle{ 
  		printCurrentMessage
  		//msg(obstacle,event,distancefilter,none,obstacle(7),12) |
//  		[# emit( currentMsg ) #]
		onMsg( obstacle:obstacle(D)){ 
			[# val D = payloadArg(0); val DD = D.toInt()*10  #]
	        println("obstacle distance $DD") color magenta
			emit sonardata : distance($DD)
  		}	
	}
   	Transition t0  whenEvent obstacle  -> handleObstacle
   				   whenEvent sonarRobot -> handleEvent
 	
  	State handleEvent{
  		printCurrentMessage
  	}
   	Transition t0 whenEvent sonarRobot -> handleEvent
   				  whenEvent obstacle  -> handleEvent
 }

