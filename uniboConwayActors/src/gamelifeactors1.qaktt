System gamelifeactors 

Dispatch guicmd        : guicmd(X) //X=startthegame | stopthegame
Dispatch fromdisplay   : fromdisplay(CELL)
Dispatch todisplay     : todisplay(CELL,STATE)

Event startthegame     : startthegame(X)
Event stopthegame      : stopthegame(X)
  
Context ctxconwayactors ip [ host="localhost" port=8360] 

QActor griddisplay context ctxconwayactors{
	[# val display = conway.ConwayIO() #] //create an object
	State s0 initial{
		println("=======================================") color blue
		println("$name | gamelifeactors1.qak STARTS") color blue
		println("=======================================") color blue
		//[# conway.GridSupport.readGridConfig("gridConfig.json") #]  //TODO: chi lo chiama???
		[# kotlin.concurrent.thread(start = true) {
			 display.initialize(myself)  //launch javafx.application.Application
		   }
		#]		
	}	 
	Goto working
		
	State working{
		//println("$name | working") color blue
	}
	Transition t0 whenMsg guicmd    -> guicmdhandle
	              whenMsg todisplay -> todisplayhandle
	
	State guicmdhandle{
		//printCurrentMessage color cyan
         onMsg( guicmd : guicmd(startthegame)){ //seleziona usando UNIFICAZIONE Prolog
            forward gamemock -m fromdisplay : fromdisplay( start )
         } 		
         onMsg( guicmd : guicmd(stopthegame)){
         	emit stopthegame : stopthegame(fromgui)
		}
        onMsg( guicmd : guicmd(click(X,Y)) ){
        	//[# var xy = payloadArg(0).replace("click","").replace("(","").replace(")","").split(",") #]       	
        	[# val template = "click(X,Y)" 
        	   val goal     = "${payloadArg(0)}=$template"; //UNIFICAZIONE
        	   val x = sysUtil.solve( goal,"X" )!!.toInt();
        	   val y = sysUtil.solve( goal,"Y" )!!.toInt();
        	#]
         	//println("$name | guicmdhandle ${x} $y") color blue
         	[# display.switchColor(x,y) #]
		}
         onMsg( guicmd : guicmd(clear)){
			 [# display.clearCells() #]
		}
	}
	Goto working 
	
	State todisplayhandle{
		//printCurrentMessage color cyan
		onMsg( todisplay : todisplay(CELL,STATE)){
			[#  val CellName= payloadArg(0) 
 				val State   = payloadArg(1)
                val coords  = conway.GridSupport.getCellCoords(CellName)
			    val x=coords[0]
			    val y=coords[1] 
			    
                if( State=="on") display.cellOn( x,y )
			    else display.cellOff( x,y )
			#]

		}		
	}
	Goto working
}

/*
 * Le celle appena nate
 */
QActor cell context ctxconwayactors dynamicOnly{
	State s0 initial{
		println("$name | STARTS") color blue
		[# val coords = conway.GridSupport.getCellCoords(MyName) 
		   val Dt = 400L * (coords[0]+coords[1])
		#]
		delayVar Dt
		forward griddisplay -m todisplay : todisplay( $MyName, on) 
	}
}

/*
 * Funge da tester per le funzioni di utilità
 */
QActor gamemock context ctxconwayactors{
 [# var RowsN = 0; var ColsN=0; var CellSise=0 
 	
 	val neighBornFName = "cellnbs.pl"
 	val cellsFName     = "grid.pl"	
 	
 #] 
    State s0 initial{
               [# val res = 
                    conway.GridSupport.readGridConfig("gridConfig.json") 
                  RowsN  = res.get(0)
                  ColsN  = res.get(1)
                  conway.GridSupport.genLocalGriddescr(
               		context!!.name, RowsN,ColsN,neighBornFName,cellsFName )
                #]
             }	               
	Goto usekb
	
	State usekb{
		[# sysUtil.loadTheory(cellsFName) #]
      [#
        val cells = conway.GridSupport.getCellNamesInContext(context!!.name)
      #]            
      println("$name | cell names: $cells" ) color magenta
 
	}
	Goto createCells

	State createCells{
		delay 1000 //give time the display to start ..
        [# conway.GridSupport.createCellsInternal(myself) #]
        
        //Controllo degli attori nel contesto ...
        [#
        	val actorNames = sysUtil.getAllActorNames()
            //CommUtils.outblue("$name | Actors in context:\n $actorNames" )
        	
        #]	
        println("$name | Actors in context:  ") color magenta 
        println("$actorNames") color magenta
	}
	Transition t0 whenEvent stopthegame  -> handlestop

	State handlestop{
		println("$name | handlestop TODO")
		//[# System.exit(0) #]
	}
}	 
 