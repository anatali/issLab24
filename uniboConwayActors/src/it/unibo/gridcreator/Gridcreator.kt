/* Generated by AN DISI Unibo */ 
package it.unibo.gridcreator

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Gridcreator ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 
		 	var RowsN = 0; var ColsN=0; var CellSize=0 
		 	val neighBornFName = "cellnbs.pl"
		 	val cellsFName     = "grid.pl"	
		    var NAllCells      =  0  //set in s0
		    var NCellsCreated  =  0  //set in handlecellecreated 		
		    var NCellended      = 0  //set in terminatethegame
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						 
								val res =
							conway.GridSupport.readGridConfig("gridConfig.json")
								      RowsN     = res.get(0)
								      ColsN     = res.get(1)
								      NAllCells = RowsN * ColsN       
						CommUtils.outblue("$name | NAllCells=$NAllCells")
						delay(1000) 
						
							  conway.GridSupport.createCellsLocal(
									myself,RowsN,ColsN,neighBornFName,cellsFName)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t010",targetState="handlecellcreated",cond=whenDispatch("cellcreated"))
				}	 
				state("handlecellcreated") { //this:State
					action { //it:State
						 NCellsCreated = NCellsCreated + 1  
						if(  NCellsCreated == NAllCells  
						 ){CommUtils.outblack("$name | ACTORS in ${context!!.name} ${sysUtil.getAllActorNames()}")
						forward("allcellcreated", "allcellcreated($NCellsCreated)" ,"gridcreator" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="handlecellcreated",cond=whenDispatch("cellcreated"))
					transition(edgeName="t012",targetState="configthecells",cond=whenDispatch("allcellcreated"))
				}	 
				state("configthecells") { //this:State
					action { //it:State
						 conway.GridSupport.configureTheCells(myself)  
						forward("gameready", "gameready($NAllCells)" ,"gamelife" ) 
						updateResourceRep( "gameready($NAllCells)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t013",targetState="terminatethegame",cond=whenDispatch("cellends"))
				}	 
				state("terminatethegame") { //this:State
					action { //it:State
						 NCellended = NCellended + 1  
						if(  NCellended == NAllCells  
						 ){forward("gameended", "gameended($NAllCells)" ,"gamelife" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t014",targetState="terminatethegame",cond=whenDispatch("cellends"))
				}	 
			}
		}
} 
