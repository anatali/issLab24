/* Generated by AN DISI Unibo */ 
package it.unibo.griddisplay

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Griddisplay ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val display = conway.ConwayIO()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("=======================================")
						CommUtils.outblue("$name | gamelifeactors0.qak STARTS")
						CommUtils.outblue("=======================================")
						 kotlin.concurrent.thread(start = true) {
									 display.initialize(myself)  //launch javafx.application.Application
								   }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
				state("working") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="guicmdhandle",cond=whenDispatch("guicmd"))
					transition(edgeName="t01",targetState="todisplayhandle",cond=whenDispatch("todisplay"))
				}	 
				state("guicmdhandle") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("guicmd(X)"), Term.createTerm("guicmd(startthegame)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("fromdisplay", "fromdisplay(start)" ,"gamemock" ) 
						}
						if( checkMsgContent( Term.createTerm("guicmd(X)"), Term.createTerm("guicmd(stopthegame)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								emit("stopthegame", "stopthegame(fromgui)" ) 
						}
						if( checkMsgContent( Term.createTerm("guicmd(X)"), Term.createTerm("guicmd(click(X,Y))"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val template = "click(X,Y)" 
								        	   val goal     = "${payloadArg(0)}=$template"; //UNIFICAZIONE
								        	   val x = sysUtil.solve( goal,"X" )!!.toInt();
								        	   val y = sysUtil.solve( goal,"Y" )!!.toInt();
								 display.switchColor(x,y)  
						}
						if( checkMsgContent( Term.createTerm("guicmd(X)"), Term.createTerm("guicmd(clear)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 display.clearCells()  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
				state("todisplayhandle") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("todisplay(CELL,STATE)"), Term.createTerm("todisplay(CELL,STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  val CellName= payloadArg(0) 
								 				val State   = payloadArg(1)
								                val coords  = conway.GridSupport.getCellCoords(CellName)
											    val x=coords[0]
											    val y=coords[1] 
								                if( State=="true") display.cellOn( x,y )
											    else display.cellOff( x,y )
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
			}
		}
} 
