/* Generated by AN DISI Unibo */ 
package it.unibo.vrqak

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024
import main.resources.robotvirtual.VrobotLLMoves24

class Vrqak ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val vr = VrobotLLMoves24.create("localhost",myself)
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name STARTS")
						subscribeToLocalActor("vrqak") 
						CommUtils.outblue("$name subscribe to myself done")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outblue("$name | work")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handlecmd",cond=whenDispatch("cmd"))
					transition(edgeName="t01",targetState="handleStep",cond=whenRequest("step"))
					transition(edgeName="t02",targetState="handleVrinfoMsg",cond=whenDispatch("vrinfo"))
				}	 
				state("handlecmd") { //this:State
					action { //it:State
						CommUtils.outblue("$name | handlecmd")
						if( checkMsgContent( Term.createTerm("cmd(MOVE)"), Term.createTerm("cmd(M)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Move = payloadArg(0)  
								if(  Move == "h"  
								 ){ vr.halt()  
								}
								if(  Move == "p"  
								 ){ vr.step(350)  
								}
								if(  Move == "w"  
								 ){ vr.forward(2500)  
								}
								if(  Move == "s"  
								 ){ vr.backward(2500)  
								}
								if(  Move == "a" || Move == "l"  
								 ){ vr.turnLeft()  
								}
								if(  Move == "d" || Move == "r"  
								 ){ vr.turnRight()  
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleVrinfoMsg") { //this:State
					action { //it:State
						CommUtils.outblue("$name | handleVrinfoMsg ")
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleStep") { //this:State
					action { //it:State
						CommUtils.outblue("$name | handleStep")
						 vr.forward(350)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="handleVrinfoForStepMsg",cond=whenDispatch("vrinfo"))
				}	 
				state("handleVrinfoForStepEv") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | handleVrinfoForStepEv")
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("vrinfo(A,B)"), Term.createTerm("vrinfo(turnLeft,R)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var R = payloadArg(1) 
								CommUtils.outmagenta("$name | handleVrinfoForStepEv turnLeft, R=$R")
						}
						if( checkMsgContent( Term.createTerm("vrinfo(A,B)"), Term.createTerm("vrinfo(turnRight,R)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var R = payloadArg(1) 
								CommUtils.outmagenta("$name | handleVrinfoForStepEv turnRight, R=$R")
						}
						if( checkMsgContent( Term.createTerm("vrinfo(A,B)"), Term.createTerm("vrinfo(moveForward,elapsed)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val T = payloadArg(0); var C = payloadArg(1) 
								CommUtils.outmagenta("$name | handleVrinfoForStepEv moveForward elapsed, C=$C")
								answer("step", "stepdone", "stepdone(ok)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleVrinfoForStepMsg") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("vrinfo(A,B)"), Term.createTerm("vrinfo(obstacle,C)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val T = payloadArg(0); var C = payloadArg(1) 
								CommUtils.outblue("$name | handleVrinfoForStepMsg obstacle, C=$C")
								answer("step", "stepfailed", "stepfailed($T,$C)"   )  
						}
						if( checkMsgContent( Term.createTerm("vrinfo(A,B)"), Term.createTerm("vrinfo(T,collision)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val T = payloadArg(0); var C = payloadArg(1) 
								CommUtils.outblue("$name | handleVrinfoForStepMsg collision, T=$T")
								answer("step", "stepfailed", "stepfailed($T,$C)"   )  
						}
						if( checkMsgContent( Term.createTerm("vrinfo(A,B)"), Term.createTerm("vrinfo(moveForward,elapsed)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val T = payloadArg(0); var C = payloadArg(1) 
								CommUtils.outblue("$name | handleVrinfoForStepMsg moveForward elapsed, C=$C")
								answer("step", "stepdone", "stepdone(ok)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleStepdone") { //this:State
					action { //it:State
						CommUtils.outblue("$name | step done")
						answer("step", "stepdone", "stepdone(ok)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleStepfailed") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("stepfailed(DURATION,CAUSE)"), Term.createTerm("stepfailed(T,C)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val T = payloadArg(0); val C = payloadArg(1)  
								CommUtils.outblue("$name | step failed after $T since $C")
								answer("step", "stepfailed", "stepfailed($T,$C)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 
