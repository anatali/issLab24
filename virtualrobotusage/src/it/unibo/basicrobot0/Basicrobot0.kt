/* Generated by AN DISI Unibo */ 
package it.unibo.basicrobot0

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024
import main.resources.robotvirtual.VrobotHLMovesActors24
import main.resources.gui.*

class Basicrobot0 ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val vr = VrobotHLMovesActors24.create()
		  
		    GuiUtils.showSystemInfo()
		    vr.setTrace(true) 
		    vr.connect("localhost", myself) 
		    VrobotHLCmdGuiLocal(vr)
		
			var StepTime      = 0L
		    var StartTime     = 0L      
		    var Duration      = 0L   
		    var RobotType     = "" 
		    var CurrentMove   = "unkknown"
		    var StepSynchRes  = false
		    var AnswerKo      = ""     
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						discardMessages = false
						CommUtils.outmagenta("basicrobot0  | waiting, working   ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="doStep",cond=whenRequest("step"))
					transition(edgeName="t03",targetState="execcmd",cond=whenDispatch("cmd"))
				}	 
				state("execcmd") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("cmd(MOVE)"), Term.createTerm("cmd(MOVE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentMove = payloadArg(0)  
								vr.move( payloadArg(0)  )
								updateResourceRep( "moveactivated(${payloadArg(0)})"  
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("doStep") { //this:State
					action { //it:State
						StartTime = getCurrentTime()
						if( checkMsgContent( Term.createTerm("step(TIME)"), Term.createTerm("step(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 StepTime = payloadArg(0).toLong()   
						}
						 StepSynchRes = vr.step( StepTime )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="stepok", cond=doswitchGuarded({ StepSynchRes  
					}) )
					transition( edgeName="goto",targetState="stepKo", cond=doswitchGuarded({! ( StepSynchRes  
					) }) )
				}	 
				state("stepok") { //this:State
					action { //it:State
						 StepSynchRes = false  
						vr.move( "h"  )
						updateResourceRep( "stepDone($StepTime)"  
						)
						answer("step", "stepdone", "stepdone($StepTime)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("stepKo") { //this:State
					action { //it:State
						if(  AnswerKo == ""  
						 ){Duration = getDuration(StartTime)
						vr.move( "h"  )
						 var TunedDuration   = StepTime - ((Duration * 0.80)).toLong()    
						if(  TunedDuration > 30  
						 ){vr.move( "s"  )
						delay(TunedDuration)
						vr.move( "h"  )
						updateResourceRep( "stepFail($Duration)"  
						)
						delay(300) 
						}
						answer("step", "stepfailed", "stepfailed($Duration,obst)"   )  
						}
						else
						 {answer("step", "stepfailed", "stepfailed($Duration,$AnswerKo)"   )  
						  AnswerKo = ""  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 
