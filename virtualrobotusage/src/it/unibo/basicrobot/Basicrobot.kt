/* Generated by AN DISI Unibo */ 
package it.unibo.basicrobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024
import main.resources.robotvirtual.VrobotLLMoves24

class Basicrobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val vr = VrobotLLMoves24.create("localhost",myself)
		 var doingAsynchStep = false   
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name STARTS")
						 vr.setTrace(true)  
						subscribeToLocalActor("basicrobot") 
						CommUtils.outblue("$name subscribe to myself done")
						connectToMqttBroker( "wss://test.mosquitto.org:8081" )
						subscribe(  "unibodisi" ) //mqtt.subscribe(this,topic)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outblue("$name | work")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="dohalt",cond=whenDispatch("halt"))
					transition(edgeName="t01",targetState="domove",cond=whenDispatch("move"))
					transition(edgeName="t02",targetState="domoverequest",cond=whenRequest("cmd"))
					transition(edgeName="t03",targetState="handleAsynchStep",cond=whenRequest("step"))
				}	 
				state("dohalt") { //this:State
					action { //it:State
						CommUtils.outred("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 vr.halt()  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleSonarData") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("sonar(DISTANCE)"), Term.createTerm("sonar(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var D = payloadArg(0)  
								 val sonarEvent = "sonardata(" +  D + ")"  
								CommUtils.outmagenta("$name | handleSonarData $sonarEvent")
								updateResourceRep( "$sonarEvent"  
								)
								updateResourceRep( "nonews"  
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handleVrinfoMsgReply",cond=whenDispatch("vrinfo"))
				}	 
				state("domove") { //this:State
					action { //it:State
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("move(M)"), Term.createTerm("move(M)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Move = payloadArg(0);   
								if(  Move == "h"  
								 ){ vr.halt()  
								}
								if(  Move == "w"  
								 ){ vr.step(150)  
								}
								if(  Move == "p"  
								 ){ vr.step(350)  
								}
								if(  Move == "a" || Move == "l"  
								 ){ vr.turnLeft()  
								}
								if(  Move == "d" || Move == "r"  
								 ){ vr.turnRight()  
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("domoverequest") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("cmd(MOVE,T)"), Term.createTerm("cmd(M,T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Move = payloadArg(0); val T = payloadArg(1).toInt()  
								CommUtils.outblue("$name | domoverequest $Move $T")
								if(  Move == "h"  
								 ){ vr.halt()  
								}
								if(  Move == "p"  
								 ){ vr.step(T.toLong())  
								}
								if(  Move == "w"  
								 ){ vr.forward(T)  
								}
								if(  Move == "s"  
								 ){ vr.backward(T)  
								}
								if(  Move == "a" || Move == "l"  
								 ){ vr.turnLeft()  
								}
								if(  Move == "d" || Move == "r"  
								 ){ vr.turnRight()  
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="handleSonarData",cond=whenEvent("sonardata"))
					transition(edgeName="t06",targetState="handleVrinfoMsgReply",cond=whenDispatch("vrinfo"))
				}	 
				state("handleVrinfoMsgReply") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | handleVrinfoMsgReply $currentMsg")
						if( checkMsgContent( Term.createTerm("vrinfo(A,B)"), Term.createTerm("vrinfo(M,elapsed)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  doingAsynchStep  
								 ){answer("step", "stepdone", "stepdone(ok)"   )  
								 doingAsynchStep = false  
								}
								else
								 {answer("cmd", "cmddone", "cmddone(elapsed)"   )  
								 }
						}
						if( checkMsgContent( Term.createTerm("vrinfo(A,B)"), Term.createTerm("vrinfo(T,collision)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val T = payloadArg(0)  
								if(  doingAsynchStep  
								 ){answer("step", "stepfailed", "stepfailed($T,collision)"   )  
								 doingAsynchStep = false  
								}
								else
								 {CommUtils.outyellow("$name | reply cmdfailed after $T")
								 answer("cmd", "cmdfailed", "cmdfailed($T,collision)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleAsynchStep") { //this:State
					action { //it:State
						CommUtils.outblue("$name | handleAsynchStep")
						 doingAsynchStep = true   
						if( checkMsgContent( Term.createTerm("step(TIME)"), Term.createTerm("step(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 vr.forward(payloadArg(0).toInt() )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="handleSonarData",cond=whenEvent("sonardata"))
					transition(edgeName="t08",targetState="handleVrinfoMsgReply",cond=whenDispatch("vrinfo"))
					transition(edgeName="t09",targetState="dohalt",cond=whenDispatch("halt"))
				}	 
			}
		}
} 
