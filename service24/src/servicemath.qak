System /*-msglog  -trace */ servicemath  
//mqttBroker "broker.hivemq.com" : 1883

Request dofibo   : dofibo(N)
Reply   fibodone : fibodone( CALLER,N,R ) for dofibo

//Messages for the display 
Dispatch out  : out(S) 
Dispatch show  : show(S)         
 
Context ctxservice ip [host="localhost" port=8011]  
 
QActor display context ctxservice {  //withobj d using "utils.DisplayObj.create()"
 	State s0 initial{		
	}
	Transition t0 whenMsg out -> handleout
	
	State handleout{
		printCurrentMessage color yellow
		[# val SOUT = "${currentMsg.msgContent()}" #]
		//[# d.write( SOUT ) #]
		updateResource [# SOUT #]
		
//		onMsg( out:out(TERM)){
//			[# val OutMsg = payloadArg(0) #]
//			[# d.print("$OutMsg") #]
//			 
//		}		
	} 
	Transition t0 whenMsg out -> handleout
}

/*
 */
 
QActor caller_test context ctxservice {  
	[# val N = 6 
       var SOUT = ""
	#]
 	State init initial { 
  		delay 6000
		[# SOUT = "$name | starts "#]
		forward display -m out : out($SOUT)
 		request servicemath -m dofibo : dofibo(40)
 		delay 500
 		request servicemath -m dofibo : dofibo(6)
	}	 
	Transition t0 whenReply fibodone -> fiboanswer
	
	State fiboanswer{
		printCurrentMessage color magenta
		[# val M = currentMsg.msgContent() #]
		//println("$currentMsg") color red
		onMsg(fibodone : fibodone( CALLER,V,R) ){
			//println("$name | fiboanswer for ${N}=${payloadArg(0)}") color magenta
			//printCurrentMessage color magenta
			[# val SOUT = "$name | fiboanswer for ${payloadArg(1)} from ${payloadArg(0)}=${payloadArg(2)}" #]
            forward display -m out : out($SOUT)
		}   
	}
	Transition t0 whenReply fibodone -> fiboanswer
}


/*
 * SERVICE 
 */
QActor servicemath context ctxservice {
	 
	State init initial { 
		println("$name  STARTS ") color blue
	}	
	Transition t0 whenRequest dofibo -> work
	 
	State work{
		onMsg( dofibo : dofibo(N) ){
			[#  
			   var ReqId  = currentMsg.msgId()
			   var ReqArg = payloadArg(0)
			   var Sender = currentMsg.msgSender()
			#]
			[# val SOUT = "$name | $ReqId $ReqArg Sender=$Sender" #]
			println("$SOUT") color blue
			//forward display -m out  : out(  $SOUT  )
			delegateCurrentMsgTo actionexec
			//create actionexecutor requestbycreator doaction : doaction ( $ReqId,$ReqArg,$Sender,name ) 
		}
	}  
	Transition t0   whenRequest dofibo    -> work

 }

QActor actionexec  context ctxservice withobj math using "utils.MathUtils.create()" dynamicOnly{
	State init initial {
		//println("$name | STARTS ")  color cyan
    }	 
    Transition t0 whenRequest dofibo -> work
	
	State work{
		printCurrentMessage color green
		onMsg( dofibo : dofibo( N ) ){
			[#   
				var ReqArg  = payloadArg(0) 
 				var Sender  = currentMsg.msgSender() 
			#]  
			//println("$name | work N=$N ${sysUtil.curThread()}") color blue
			[# var D = ReqArg.toInt() * 20L #] 
			delayVar D
 			[#  var F = math.fibo( ReqArg.toInt() ) #]   //SIMULO AZIONE LUNGA SENZA FARE delay
			[# val SOUT = "$name, fibo($ReqArg), $F" #]
			println("$SOUT") color cyan
			forward display -m out : out($SOUT)
			replyTo dofibo with fibodone : fibodone($Sender,$ReqArg,$F)
 			   
			terminate 0

			[# var anames = sysUtil.getAllActorNames(context!!.name) #]
			println("$name | AFTER: $anames")
		}
	} 
 
 }


 
DisplayHTML servicedev port 8020 usingactor display inctx ctxservice

