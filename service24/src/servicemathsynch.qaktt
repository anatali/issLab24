System /*-msglog  -trace */ servicemathsynch 
//mqttBroker "broker.hivemq.com" : 1883

Request dofibo   : dofibo(N)
Reply   fibodone : fibodone( CALLER,N,R ) for dofibo

Dispatch show : show(S)
Dispatch out  : out(S)

Context ctxservice ip [host="localhost" port=8011]  

/* 

 */
 
QActor caller1 context ctxservice {  
	[# val N = 6 
	#]
 	State init initial { 
		delay 1100
		println("$name | STARTS ") color blue
		request servicemath -m dofibo : dofibo($N)
	}	 
	Transition t0 whenReply fibodone -> fiboanswer
	
	State fiboanswer{
		printCurrentMessage color blue
		//[# val M = currentMsg.msgContent() #]
		//println("$currentMsg") color red
		onMsg(fibodone : fibodone( CALLER,V,R) ){
			[# val SOUT = "$name | fiboanswer for N=${payloadArg(1)} calledby ${payloadArg(0)}:${payloadArg(2)}" #]
//            forward display -m out : out($SOUT) 
			println("$name | $SOUT") color blue
		}   
	}
}

QActor caller2 context ctxservice {
	[# var N = 40 
	#]
	State init initial {  
		delay 1000
		println("$name | STARTS ") color green
		request servicemath -m dofibo : dofibo($N)
	}	
	Transition t0 whenReply fibodone -> fiboanswer
	
	State fiboanswer{
		printCurrentMessage color green
		onMsg(fibodone : fibodone( CALLER,V,R ) ){
			[# val SOUT = "$name | fiboanswer for N=${payloadArg(1)} calledby ${payloadArg(0)}:${payloadArg(2)}" #]
			//forward display -m out : out($SOUT)
			println("$name | $SOUT") color green
		}
	}
}

 

QActor display context ctxservice withobj d using "utils.DisplayObj.create()"{  
 	State s0 initial{		
	}
	Transition t0 whenMsg out -> handleout
	
	State handleout{
		onMsg( out:out(TERM)){
			[# val OutMsg = payloadArg(0) #]
			[# d.write("$OutMsg") #]
			updateResource [# OutMsg #]
		}		
	} 
	Transition t0 whenMsg out -> handleout
}

   
/*
 * SERVICE : senza caller locali usare jupyter
 */
QActor servicemath context ctxservice withobj math using "utils.MathUtils.create()"{
	State init initial { 
		println("$name  STARTS ") color green
	}	
	Transition t0 whenRequest dofibo -> work
	
	State work{  
		[# var SOUT : String #]
		onMsg( dofibo : dofibo(N) ){
			[# //var ReqId  = currentMsg.msgId()
			   var ReqArg = payloadArg(0) 
			   var Sender = currentMsg.msgSender()  
			   //val M      = currentMsg
			#]
//			forward display -m show : show( $M )
//		    [# var F = utils.Common.fibo( ReqArg.toInt() ) #]   
		    [# var F = math.fibo( ReqArg.toInt() ) #] 
			[# SOUT  = "result($name, fibo($ReqArg), $F)" #]
			println("$SOUT") color magenta
//			forward display -m show : show($SOUT)		    
		    replyTo dofibo /*ofsender $Sender*/ with fibodone : fibodone($Sender,$ReqArg,$F)
		}
	}  
	Transition t0  whenRequest dofibo -> work
 }

//DisplayHTML servicedev port 8085 usingactor display inctx ctxservice 

