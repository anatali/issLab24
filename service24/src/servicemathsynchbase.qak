System /*-msglog  -trace */  servicemathsynchbase 
//mqttBroker "broker.hivemq.com" : 1883 eventTopic "servicemathsynch/events"
   
UserLibs   file "qakfacadegui23-1.0"  file "qakfacadegui23-1.0-plain"  
   
//Messages for the application 
Request dofibo   : dofibo(N)
Reply   fibodone : fibodone( CALLER,N,RESULT,TIME ) for dofibo
  
//Messages for the display 
Dispatch show : show(S)
Dispatch out  : out(S)

Event alarm : alarm(X)
 
Context ctxservice ip [host="localhost" port=8011]  

   
/*
 * SERVICE : senza caller locali usare jupyter o mqtt
 */
QActor servicemath context ctxservice withobj math using "MathUtils()" {//withobj math using "utils.MathUtils.create()"
import "utils.MathUtils" 

	State init initial { 
		println("$name  STARTS ") color green
	}	
	Transition t0 whenRequest dofibo -> work
	              whenEvent alarm    -> handlealarm
	 
	State work{  
		printCurrentMessage color green
		[# var SOUT : String #]
		onMsg( dofibo : dofibo(N) ){
			[# //var ReqId  = currentMsg.msgId()
			   var ReqArg = payloadArg(0) 
			   var Sender = currentMsg.msgSender()  
			   //val M      = currentMsg
			#]
//			forward display -m show : show( $M )
//		    [# var F = utils.Common.fibo( ReqArg.toInt() ) #]   
[# val T0 = getCurrentTime()   #]
		    [# var F = math.fibo( ReqArg.toInt() ) #] 
[# val TF  = getDuration(T0)  #]
			[# SOUT  = "servicemathresult($name, fibo($ReqArg), $F, $TF)" #]
			println("$SOUT") color magenta
			//delay 1000
			updateResource [# SOUT #] //gestito da CoapObserver con Facade
			//[# publish("unibo/qak/pythonan","hello") #]  //PROVA MQTT out
 			
 			//forward displayweb -m show : show($SOUT)		

//La reply potrebbe essere inviata all'alieno servicefacade
//In questo caso OutIn invia la info sulla messagearea
//Potrebbe entrare il conflitto di scrittura con  CoapObserver (updateResource)
//Per questo protected synchronized  void sendToAll(String message)
		    replyTo dofibo /*ofsender $Sender*/ with fibodone : fibodone($Sender,$ReqArg,$F,$TF)
		}
	}  
	Transition t0  whenRequest dofibo -> work
	               whenEvent alarm    -> handlealarm
	
	State handlealarm{
		printCurrentMessage color green
		[# val SOUT  = "servicemath( $name, alarm )" #]
		updateResource [# SOUT #] 
	}
	Transition t0 whenRequest dofibo -> work
	              whenEvent alarm    -> handlealarm
 }
 
//DisplayHTML servicedev port 8085 usingactor displayweb inctx ctxservice  
Facade f port 8088 usingactor servicemath inctx ctxservice   
 

 