System /*-msglog   */ -trace servicemathsynch 
//mqttBroker "broker.hivemq.com" : 1883 eventTopic "servicemathsynch/events"
   
UserLibs   file "qakfacadegui23-1.0"  file "qakfacadegui23-1.0-plain"  
  
//Messages for the application 
Request dofibo   : dofibo(N)
Reply   fibodone : fibodone( CALLER,N,RESULT,TIME ) for dofibo
 
//Messages for the display 
Dispatch show : show(S)
Dispatch out  : out(S)

Event alarm : alarm(X)
 
Context ctxservice ip [host="localhost" port=8011]  

QActor display context ctxservice withobj d using "DisplayObj.create()"{  
import "utils.DisplayObj"
import "utils.Common"

 	State s0 initial{	
 		 	//[# Common.hello() #]	
	}
	Transition t0 whenMsg out  -> view
	              //whenMsg show -> view
 	
	State view{
		printCurrentMessage color yellow
		[# val SOUT = "${currentMsg.msgContent()}" #] //inizia con out o con show
		println("$name | $SOUT ") color yellow
		[# d.write("$SOUT") #]
		
	} 
	Transition t0 whenMsg out  -> view
	              //whenMsg show -> view
  	 
}

  
QActor displayweb context ctxservice  {  

 	State s0 initial{	
 		
	}
	Transition t0 whenMsg out  -> view
	              whenMsg show -> view
 	
	State view{
		printCurrentMessage color black
		[# val SOUT = "${currentMsg.msgContent()}" #] //inizia con out o con show
		println("$name | $SOUT ") color black
		updateResource [# SOUT #]
	} 
	Transition t0 whenMsg out  -> view
	              whenMsg show -> view
  	 
}
 
 


/* 


 
QActor caller1 context ctxservice {  
	[# val N = 43 
	#]
 	State init initial { 
		delay 3000
		println("$name | request ") color blue
		request servicemath -m dofibo : dofibo($N)
		delay 3000
		println("$name | request ") color blue
		request servicemath -m dofibo : dofibo(23)
	}	 
	Transition t0 whenReply fibodone -> fiboanswer
	
	State fiboanswer{
		printCurrentMessage color blue
		//[# val M = currentMsg.msgContent() #]
		//println("$currentMsg") color red
		onMsg(fibodone : fibodone( CALLER,V,R,T) ){
			[# val SOUT = "$name | fiboanswer for N=${payloadArg(1)} calledby ${payloadArg(0)}:${payloadArg(2)} time=${payloadArg(3)}" #]
            forward display -m out : out($SOUT) 
			println("$name | $SOUT") color blue
		}   
	}
	Transition t0 whenReply fibodone -> fiboanswer
}
 
*/
/* 
QActor caller2 context ctxservice {
	[# var N = 40 
	#]
	State init initial {  
		delay 1000
		println("$name | STARTS ") color green
		request servicemath -m dofibo : dofibo($N)
	}	
	Transition t0 whenReply fibodone -> fiboanswer
	
	State fiboanswer{
		printCurrentMessage color green
		onMsg(fibodone : fibodone( CALLER,V,R ) ){
			[# val SOUT = "$name | fiboanswer for N=${payloadArg(1)} calledby ${payloadArg(0)}:${payloadArg(2)}" #]
			//forward display -m out : out($SOUT)
			println("$name | $SOUT") color green
		}
	}
}
*/
 


   
/*
 * SERVICE : senza caller locali usare jupyter o mqtt
 */
QActor servicemath context ctxservice withobj math using "MathUtilsJava.create()" {//withobj math using "utils.MathUtils.create()"
import "utils.MathUtilsJava" 

	State init initial { 
		println("$name  STARTS ") color green
	}	
	Transition t0 whenRequest dofibo -> work
	              whenEvent alarm    -> handlealarm
	 
	State work{  
		printCurrentMessage color green
		[# var SOUT : String #]
		onMsg( dofibo : dofibo(N) ){
			[# //var ReqId  = currentMsg.msgId()
			   var ReqArg = payloadArg(0) 
			   var Sender = currentMsg.msgSender()  
			   //val M      = currentMsg
			#]
//			forward display -m show : show( $M )
//		    [# var F = utils.Common.fibo( ReqArg.toInt() ) #]   
[# val T0 = getCurrentTime()   #]
		    [# var F = math.fibo( ReqArg.toInt() ) #] 
[# val TF  = getDuration(T0)  #]
			[# SOUT  = "servicemathresult($name, fibo($ReqArg), $F, $TF)" #]
			println("$SOUT") color magenta
			//delay 1000
			updateResource [# SOUT #] //gestito da CoapObserver con Facade
			//[# publish("unibo/qak/pythonan","hello") #]  //PROVA MQTT out
 			forward displayweb -m show : show($SOUT)		

//La reply potrebbe essere inviata all'alieno servicefacade
//In questo caso OutIn invia la info sulla messagearea
//Potrebbe entrare il conflitto di scrittura con  CoapObserver (updateResource)
//Per questo protected synchronized  void sendToAll(String message)
		    replyTo dofibo /*ofsender $Sender*/ with fibodone : fibodone($Sender,$ReqArg,$F,$TF)
		    
		    
		}
	}  
	Transition t0  whenRequest dofibo -> work
	               whenEvent alarm    -> handlealarm
	
	State handlealarm{
		printCurrentMessage
	}
	Transition t0 whenRequest dofibo -> work
	              whenEvent alarm    -> handlealarm
 }
 
//DisplayHTML servicedev port 8085 usingactor displayweb inctx ctxservice  
//Facade f port 8088 usingactor servicemath inctx ctxservice   
  
/*
 * Usando MQTT
 * - tutti gli attori ricevono eventi inviati sulla eventTopic
 * - un mqqt client che invia una richietsa (si veda mqtt_emitter.py) 
 *   riceve la risposta inviata da xxx se fa subscribe su unibo/qak/xxx
 * - un actor puo fare publish su una topic
 
 */ 

 