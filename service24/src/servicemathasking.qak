System /*-msglog  -trace */ servicemathasking  
//mqttBroker "broker.hivemq.com" : 1883

//Messages for the application 
Request dofibo   : dofibo(N)
Reply   fibodone : fibodone( CALLER,N,RESULT,TIME ) for dofibo
 
Request confirm   : confirm(X)
Reply   confirmed : confirmed(X) for confirm

Dispatch doelab   : doelab(X)

//Messages for the display 
Dispatch out  : out(S) 
Dispatch show : show(S)         
  
Context ctxservice ip [host="localhost" port=8011]  
 
QActor display context ctxservice {  //withobj d using "utils.DisplayObj.create()"
 	State s0 initial{		
	}
	Transition t0 whenMsg out  -> view
	              whenMsg show -> view
 	
	State view{
		printCurrentMessage color yellow
		[# val SOUT = "${currentMsg.msgContent()}" #] //inizia con out o con show
		println("$name | $SOUT ") color yellow
		updateResource [# "$SOUT" #]
	} 
	Transition t0 whenMsg out  -> view
	              whenMsg show -> view
}

/*
 */
 
QActor caller_test context ctxservice {  
	[#  var SOUT = ""
	#]
 	State init initial { 
  		delay 10000
  		//[# sysUtil.waitUser( "HIT a CHAR TO START", 30000)#]
		[# SOUT = "$name | 44"  #]
		forward display -m out : out($SOUT)
 		request servicemath -m dofibo : dofibo(44)
 		delay 1000
 		[# SOUT = "$name | 38"  #]
 		forward display -m out : out($SOUT)
 		request servicemath -m dofibo : dofibo(50)
 		delay 1000
 		[# SOUT = "$name | 40"  #]
 		forward display -m out : out($SOUT)
 		request servicemath -m dofibo : dofibo(40)
	}	 
	Transition t0 whenReply fibodone  -> fiboanswer
	              whenRequest confirm -> handleAskFromreceiver
	
	State fiboanswer{
		printCurrentMessage color magenta
		onMsg(fibodone : fibodone( CALLER,V,R,T) ){
			[# SOUT = "$name | fiboanswer for ${payloadArg(1)} from ${payloadArg(0)}=${payloadArg(2)} time=${payloadArg(3)}" #]
            forward display -m out : out($SOUT)
		}   
	}
	Transition t0 whenReply fibodone -> fiboanswer
	              whenRequest confirm -> handleAskFromreceiver
	
	State handleAskFromreceiver{
		printCurrentMessage color magenta
		onMsg( confirm : confirm(N)){
			if [# payloadArg(0).toInt() > 45 #]{
				replyTo confirm with confirmed : confirmed(no)
			}else{
				replyTo confirm with confirmed : confirmed(yes)
			}
		}
		
	}
	Transition t0 whenReply fibodone -> fiboanswer
}


/*
 * SERVICE 
 */
QActor servicemath context ctxservice {
	 
	State init initial { 
		println("$name  STARTS ") color blue
	}	
	Transition t0 whenRequest dofibo -> work
	 
	State work{
		onMsg( dofibo : dofibo(N) ){
			[#  
			   var ReqId  = currentMsg.msgId()
			   var ReqArg = payloadArg(0)
			   var Sender = currentMsg.msgSender()
			#]
			[# val SOUT = "$name | $ReqId $ReqArg Sender=$Sender" #]
			println("$SOUT") color blue
			//forward display -m out  : out(  $SOUT  )
			delegateCurrentMsgTo actionexec
 		}
	}  
	Transition t0   whenRequest dofibo    -> work
	                whenReply confirmed -> answerAfterAsk
	
	State answerAfterAsk{
		printCurrentMessage
	}

 }

/*
 * Ogni istanza lavora per una specifica richiesta
 */
QActor actionexec  context ctxservice withobj math using "utils.MathUtils.create()" dynamicOnly{
	[# var N      = 0 
	   var Sender = ""		
	#]  
	State init initial {
		//println("$name | STARTS ")  color cyan
    }	 
    Transition t0 whenRequest dofibo -> work
	
	State work{
		printCurrentMessage color green
		onMsg( dofibo : dofibo( N ) ){
			[#   
				N       = payloadArg(0).toInt()
 				Sender  = currentMsg.msgSender() 
			#]  
			
			if [# N > 43 #]{
				ask confirm : confirm($N) forrequest dofibo
			}
			else{
				autodispatch doelab : doelab($N)  
				//[# forward("doelab", "doelab($N)" , name ) #]
				//println("$name | work N=$N ${sysUtil.curThread()}") color blue
			}
		} 
	}
	Transition t0 whenReply confirmed -> checkelab
	              whenMsg doelab      -> elab
	
	State checkelab{
		onMsg( confirmed : confirmed( X ) ){
			[# val Arg = payloadArg(0) #]
			if [# payloadArg(0) == "yes"#]{  
			  println("confirmed $MyName  $name autodispatch" ) color red
			  autodispatch doelab : doelab($N) 
			  //[# forward("doelab", "doelab($N)" , name ) #]			  
			}else{
				[# val SOUT = "$name, fibo($N), not confirmed" #]
				forward display -m show : show($SOUT)
				terminate 0		 
			    [# var anames = sysUtil.getAllActorNames(context!!.name) #]
			    println("$name | AFTER: $anames")			  	
			}
		}
	}
	Transition t0  whenMsg doelab  -> elab  //Se no l'esecutore termina
	
	State elab{
		onMsg( doelab : doelab( N ) ){
			[# 
				val ReqArg = payloadArg(0)
				val T0  = getCurrentTime()  
		 		var F   = math.fibo( ReqArg.toInt() )  
		 	    val TF  = getDuration(T0)  
		 	    val SOUT = "$name, fibo($ReqArg), $F, time=$TF" 
			#]
			println("$SOUT") color cyan
			forward display -m show : show($SOUT)
			replyTo dofibo with fibodone : fibodone($Sender, $ReqArg, $F, $TF)
		 			   
			terminate 0
		 
			[# var anames = sysUtil.getAllActorNames(context!!.name) #]
			println("$name | AFTER: $anames")		
		}
 	}
 }


 
DisplayHTML servicedev port 8020 usingactor display inctx ctxservice

