/* Generated by AN DISI Unibo */ 
package it.unibo.servicemath

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024
import utils.MathUtils

class Servicemath ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val math = MathUtils()
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						CommUtils.outgreen("$name  STARTS ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="work",cond=whenRequest("dofibo"))
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 var SOUT : String  
						if( checkMsgContent( Term.createTerm("dofibo(N)"), Term.createTerm("dofibo(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 //var ReqId  = currentMsg.msgId()
											   var ReqArg = payloadArg(0) 
											   var Sender = currentMsg.msgSender()  
											   //val M      = currentMsg
								 val T0 = getCurrentTime()    
								 var F = math.fibo( ReqArg.toInt() )  
								 val TF  = getDuration(T0)   
								 SOUT  = "servicemathresult($name, fibo($ReqArg), $F, $TF)"  
								CommUtils.outmagenta("$SOUT")
								updateResourceRep( SOUT  
								)
								answer("dofibo", "fibodone", "fibodone($Sender,$ReqArg,$F,$TF)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="work",cond=whenRequest("dofibo"))
				}	 
			}
		}
} 
