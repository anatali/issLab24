/* Generated by AN DISI Unibo */ 
package it.unibo.actionexecutor

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

class Actionexecutor ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val math = utils.MathUtils.create()
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t010",targetState="work",cond=whenRequest("doaction"))
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("doaction(REQID,RARG,RCALLER,SERVICE)"), Term.createTerm("doaction(REQID,RARG,RCALLER,SERVICE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  var ReqId   = payloadArg(0)
												var ReqArg  = payloadArg(1) 
												var Caller  = payloadArg(2)
												val Service = payloadArg(3)			
												
								 var D = ReqArg.toInt() * 20L  
								delay(D)
								  var F = math.fibo( ReqArg.toInt() )  
								 val SOUT = "$name, fibo($ReqArg), $F"  
								CommUtils.outcyan("$SOUT")
								forward("out", "out($SOUT)" ,"display" ) 
								answer("dofibo", "fibodone", "fibodone($F)"   )  
								//terminate(0)
								context!!.removeInternalActor(myself)
								 var anames = sysUtil.getAllActorNames(context!!.name)  
								CommUtils.outblack("$name | AFTER: $anames")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
