/* Generated by AN DISI Unibo */ 
package it.unibo.caller_1

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Caller_1 ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val N=7  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name | STARTS")
						 val SOUT ="$name | STARTS N=$N"  
						request("dofibo", "dofibo($N)" ,"servicemathcoded" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="fiboanswer",cond=whenReply("fibodone"))
				}	 
				state("fiboanswer") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 val M = currentMsg.msgContent()  
						if( checkMsgContent( Term.createTerm("fibodone(CALLER,N,RESULT,TIME)"), Term.createTerm("fibodone(CALLER,V,R,T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Caller = payloadArg(0)
											   val N      = payloadArg(1)
											   val Result = payloadArg(2)
											   val Time   = payloadArg(3)
												val SOUT = "$name | fiboanswer for ${N} from ${Caller}=${Result} time=$Time"  
								CommUtils.outblue("$name | $SOUT")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
