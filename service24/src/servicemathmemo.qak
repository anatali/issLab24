System /*-msglog  -trace */ servicemathmemo  
//mqttBroker "broker.hivemq.com" : 1883

//Messages for the application 
Request dofibo   : dofibo(N)
Reply   fibodone : fibodone( CALLER,N,RESULT,TIME ) for dofibo
 
//Messages for the display 
Dispatch out  : out(S) 
Dispatch show  : show(S)         

//Messages for storage
Request getfibo : getfibo(N)
Reply   getfiboanswer : getfiboanswer(N,LAST,V)  //LAST=0 => V=fibo(N) else V=fibo(LAST)
  
Context ctxservice ip [host="localhost" port=8011]  
 
QActor display context ctxservice {  //withobj d using "utils.DisplayObj.create()"
 	State s0 initial{		
	}
	Transition t0 whenMsg out  -> view
	              whenMsg show -> view
	
	State view{
		printCurrentMessage color yellow
		[# val SOUT = "${currentMsg.msgContent()}" #] //inizia con out o con show
		println("$name | $SOUT ") color yellow
		updateResource [# "$SOUT" #]
	} 
	Transition t0 whenMsg out  -> view
	              whenMsg show -> view

}

/*
 */
 
QActor caller_test context ctxservice {  
	[#  var SOUT = ""
	#] 
 	State init initial { 
  		delay 6000
		[# SOUT = "$name | starts"  #]
		forward display -m out : out($SOUT)
 		request servicemath -m dofibo : dofibo(43)
 		delay 500
 		request servicemath -m dofibo : dofibo(40)
	}	 
	Transition t0 whenReply fibodone -> fiboanswer
	
	State fiboanswer{
		printCurrentMessage color magenta
		onMsg(fibodone : fibodone( CALLER,V,R,T) ){
			[# SOUT = "$name | fiboanswer for ${payloadArg(1)} from ${payloadArg(0)}=${payloadArg(2)} time=${payloadArg(3)}" #]
            forward display -m out : out($SOUT)
		}   
	}
	Transition t0 whenReply fibodone -> fiboanswer
}


QActor storage context ctxservice withobj math using "utils.MathUtils.create()"{	 
	State s0 initial { 
		[# var N = 5 #] 
		println("$name | STARTS ") color green
		[# sysUtil.loadTheory("storage.pl") #]
		[# val V = sysUtil.solve("fibo($N,V)","V") #]
		println("$name | V=$V ") color green	
//		[# val V10 = math.fibo(10,5,8) #]
//		println("$name | V10=$V10 ") color green
//		[# val V15 = math.fibo(15,5,8) #]
//		println("$name | V15=$V15 ") color green
 
        [# 
        	val VX5 = math?.fibo(5)
        #]
        println("$name | VX5=$VX5 ") color green
        
		[#  val V4 = Pair<Int,Int>(4,3)
			val V5 = Pair<Int,Int>(5,5)
			val V7 = math!!.fibo2(7,V5,V4)  //safe call
			
			val fact = "fibo(7,${V7.second})"
			val R    = sysUtil.solve("assert("+ fact +")","")
			
			val P1   = math!!.fibo3( 9 )
			val P1a  = "fibo(9,${P1.first})"
			val P1b  = "fibo(8,${P1.second})"
			sysUtil.solve("assert("+ P1a +")","")
			sysUtil.solve("assert("+ P1b +")","")
			
		#]
		println("$name | V7=$V7 R=$R  ${P1.first}|${P1.second}") color green
		[# val Z = sysUtil.solve("fibo(8,X)","X") #]
		println("$name | Z=$Z ") color green	

		[# val Q = sysUtil.solve("fibo(12,X)","X") #]
		println("$name | Q=$Q ") color green	

		[# val RR = math!!.fibo4( 42) #]
		println("$name | RR=$RR ") color green	

		[# val NUMS = sysUtil.solve("storednums(X)","X") #]
		println("$name | NUMS=$NUMS ") color green	

	}	
	
}
/*
 * SERVICE 
 */
QActor servicemath context ctxservice {
	 
	State init initial { 
		println("$name  STARTS ") color blue
	}	
	Transition t0 whenRequest dofibo -> work
	 
	State work{
		onMsg( dofibo : dofibo(N) ){
			[#  
			   var ReqId  = currentMsg.msgId()
			   var ReqArg = payloadArg(0)
			   var Sender = currentMsg.msgSender()
			#]
			[# val SOUT = "$name | $ReqId $ReqArg Sender=$Sender" #]
			println("$SOUT") color blue
			//forward display -m out  : out(  $SOUT  )
			delegateCurrentMsgTo actionexec
			//create actionexecutor requestbycreator doaction : doaction ( $ReqId,$ReqArg,$Sender,name ) 
		}
	}  
	Transition t0   whenRequest dofibo    -> work

 }

QActor actionexec  context ctxservice withobj math using "utils.MathUtils.create()" dynamicOnly{
	State init initial {
		//println("$name | STARTS ")  color cyan
    }	 
    Transition t0 whenRequest dofibo -> work
	
	State work{
		printCurrentMessage color green
		onMsg( dofibo : dofibo( N ) ){
			[#   
				var ReqArg  = payloadArg(0) 
 				var Sender  = currentMsg.msgSender() 
			#]  
			//println("$name | work N=$N ${sysUtil.curThread()}") color blue
			[# 
			   val T0 = getCurrentTime()  
 			   var F = math?.fibo( ReqArg.toInt() )  
 			   val TF  = getDuration(T0)  
			   val SOUT = "$name, fibo($ReqArg), $F, time=$TF" 
			#]
			println("$SOUT") color cyan
			forward display -m show : show($SOUT)
			replyTo dofibo with fibodone : fibodone($Sender, $ReqArg, $F, $TF)
 			   
			terminate 0
 
			[# var anames = sysUtil.getAllActorNames(context!!.name) #]
			println("$name | AFTER: $anames")
		} 
	} 
 
 }

 
DisplayHTML servicedev port 8020 usingactor display inctx ctxservice

