/* Generated by AN DISI Unibo */ 
package it.unibo.bwbrcore

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Bwbrcore ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var N = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="engage", cond=doswitch() )
				}	 
				state("engage") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | $MyName engaging ... ")
						request("engage", "engage($MyName,330)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="doboundary",cond=whenReply("engagedone"))
					transition(edgeName="t01",targetState="end",cond=whenReply("engagerefused"))
				}	 
				state("doboundary") { //this:State
					action { //it:State
						delay(200) 
						request("step", "step(335)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="stoptherobot",cond=whenEvent("obstacle"))
					transition(edgeName="t03",targetState="doboundary",cond=whenReply("stepdone"))
					transition(edgeName="t04",targetState="turnandgo",cond=whenReply("stepfailed"))
					interrupthandle(edgeName="t05",targetState="pausetherobot",cond=whenDispatch("pause"),interruptedStateTransitions)
				}	 
				state("turnandgo") { //this:State
					action { //it:State
						 N = N + 1  
						if( checkMsgContent( Term.createTerm("stepfailed(DURATION,CAUSE)"), Term.createTerm("stepfailed(T,C)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outyellow("$name | turnandgo after ${payloadArg(0)} since ${payloadArg(1)} N=$N")
						}
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						if(  N == 4  
						 ){delay(500) 
						forward("disengage", "disengage($MyName)" ,"basicrobot" ) 
						CommUtils.outyellow("$name | EXIT ")
						 System.exit(0)  
						}
						else
						 {forward("goon", "goon($N)" ,name ) 
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="stoptherobot",cond=whenEvent("obstacle"))
					transition(edgeName="t07",targetState="doboundary",cond=whenDispatch("goon"))
					interrupthandle(edgeName="t08",targetState="pausetherobot",cond=whenDispatch("pause"),interruptedStateTransitions)
				}	 
				state("stoptherobot") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						forward("cmd", "cmd(h)" ,"basicrobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("handleWEnvdata") { //this:State
					action { //it:State
						CommUtils.outyellow("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("brdata(S,INFO)"), Term.createTerm("brdata(basicrobot,sonar(D))"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outred("$name | pausetherobot")
								delay(2500) 
						}
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("pausetherobot") { //this:State
					action { //it:State
						CommUtils.outred("$name | pausetherobot")
						delay(2500) 
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("end") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | ENDS ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
