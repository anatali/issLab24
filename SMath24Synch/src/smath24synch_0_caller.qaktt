System smath24caller
/*
 * MODEL of the service 
 * form the caller point of view 
 * after requirement analysis
 */ 
Request dofibo : dofibo(N) "request to send to the service"
Reply fibodone : fibodone( CALLER,N,RESULT,REQTIME,ELABTIME) for dofibo
 
//For observe and test
Dispatch callerinfo : callerdone( CALLER,REQTIME,ELABTIME,ELAPSED )    

Dispatch obsend : obsend(X) "automsg of callerobserver"

Request info      : info(X)  "sent by the testUnit to the callerobserver"
Reply   obsinfo   : obsinfo(X) for info

Context ctxcaller  ip [host="localhost" port=8035]
Context ctxsmath   ip [host="127.0.0.1" port=8033]
  
ExternalQActor smathsynch context ctxsmath

 
/*
 * c1 sends two requests and expects to 
 * receive the answer in FIFO order,
 * even if the second request requires less elaboration time.
 */
QActor c1 context ctxcaller{
	[# var NAnswer   = 0  
	   var StartTime = 0L 
	   var Elapsed   = 0L			   
	#]
	State s0 initial{ 
		println("$name STARTS ") color blue
	}	
	Goto work 
	
	State work{
		memoCurrentTime StartTime
		request smathsynch -m dofibo : dofibo(43)
		request smathsynch -m dofibo : dofibo(8)
	}
	Transition t0 
		whenReply fibodone -> handleAnswer
		 
	State handleAnswer{ 
        setDuration Elapsed from StartTime		
        printCurrentMessage color cyan
		onMsg( fibodone : fibodone( CALLER,N,RESULT,REQTIME,ELABTIME) ){		 
		    updateResource [# "callerdone($name, ${payloadArg(3)}, ${payloadArg(4)}, $Elapsed)" #]
		}				 
	}
	Transition t0 
		whenReply fibodone -> handleAnswer
	
}

/* 
QActor callerobserver context ctxcaller withobj obsdata using "main.java.ObserverData.create()"{
 
	State s0 initial{ 
		println("$name STARTS  ") color green
		observeResource c1 msgid callerinfo
	}	  
	Transition t0 whenMsg callerinfo -> handleinfo
 
	State handleinfo{
		printCurrentMessage color green
		onMsg( callerinfo : callerdone(CALLER,REQTIME,ELABTIME,ELAPSED) ){
			[# obsdata.addToHistory( ""+payloadArg(0)+"_"+payloadArg(1)+"_"+payloadArg(2)+"_"+payloadArg(3) ) #]
			println("callerobserver check=${obsdata.checkOneCaller()}") color green			
		}
		if [#  obsdata.ready() #] {
			autodispatch obsend : obsend(ok)
		}
	} 
	Transition t0  
				  whenMsg callerinfo -> handleinfo
				  whenMsg obsend      -> waitRequestFromTester
                     

    State waitRequestFromTester{
    	
    }
	Transition t0 whenTime 1000   -> endofobs
                 whenRequest info -> handlerequest
                      
	State handlerequest{
		[# val R = obsdata.checkOneCaller() #]
		replyTo info with obsinfo : obsinfo(  $R )
	} 
	Goto endofobs
	
	State endofobs{
		println("callerobserver BYE") color green
		[# System.exit(0) #]				
	}
	
}*/