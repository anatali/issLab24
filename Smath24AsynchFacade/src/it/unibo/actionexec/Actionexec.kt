/* Generated by AN DISI Unibo */ 
package it.unibo.actionexec

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Actionexec ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val math = MathUtils.create()
		 var CurRequestTime = 0L; var SOUT="todo"  
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="work",cond=whenRequest("dofibo"))
				}	 
				state("work") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("dofibo(N)"), Term.createTerm("dofibo(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								   
												var ReqArg  = payloadArg(0) 
								 				var Sender  = currentMsg.msgSender() 
								 
											   val T0 = getCurrentTime()  
								 			   var F  = math.fibo( ReqArg.toInt() )  
								 			   val TF = getDuration(T0)   
								    		   SOUT   = "fibovalue($ReqArg , $F,  $TF)" 
								CommUtils.outmagenta("$SOUT")
								updateResourceRep( "$SOUT"  
								)
								answer("dofibo", "fibodone", "fibodone($Sender,$ReqArg,$F,$TF)"   )  
								//terminate(0)
								context!!.removeInternalActor(myself)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
