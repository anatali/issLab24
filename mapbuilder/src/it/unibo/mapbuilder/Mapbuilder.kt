/* Generated by AN DISI Unibo */ 
package it.unibo.mapbuilder

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024
import main.resources.map.RoomMap
import main.resources.map.RobotDir

class Mapbuilder ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 
			   
			   var CurPlan = ""
			   var CurMove = ""
			   var RSTEP   = false
			   var Goon    = true
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						forward("move", "move(h)" ,"vrqak" ) 
						 RobotDir.setDir(RobotDir.Direction.DOWN)  
						delay(1000) 
						CommUtils.outblue("$name STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="useMap", cond=doswitch() )
				}	 
				state("useMap") { //this:State
					action { //it:State
						solve("consult('mapProlog.pl')","") //set resVar	
						solve("consult('maprules.pl')","") //set resVar	
						solve("showCells","") //set resVar	
						CommUtils.outyellow("$name | execThePlan SOLVE")
						solve("plan(0,0,2,4,down,P)","") //set resVar	
						CommUtils.outyellow("$currentSolution")
						 CurPlan = getCurSol("P").toString().replace("[","").replace("]","").replace(",","")  
						CommUtils.outyellow("PATH= $CurPlan")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="execThePlan", cond=doswitch() )
				}	 
				state("execThePlan") { //this:State
					action { //it:State
						if(  CurPlan.length > 0  
						 ){ CurMove = ""+CurPlan[0]; 
									   CurPlan = CurPlan.drop(1) 
						CommUtils.outblue("$name | execThePlan CurMove=$CurMove")
						}
						else
						 { CurMove=""  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="doMove", cond=doswitchGuarded({ (CurMove.length > 0)  
					}) )
					transition( edgeName="goto",targetState="end", cond=doswitchGuarded({! ( (CurMove.length > 0)  
					) }) )
				}	 
				state("doMove") { //this:State
					action { //it:State
						if(  CurMove == "w"  
						 ){delay(200) 
						request("step", "step(350)" ,"vrqak" )  
						}
						if(  CurMove == "l"  
						 ){forward("move", "move(l)" ,"vrqak" ) 
						}
						if(  CurMove == "r"  
						 ){forward("move", "move(r)" ,"vrqak" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_doMove", 
				 	 					  scope, context!!, "local_tout_"+name+"_doMove", 500.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t00",targetState="execThePlan",cond=whenTimeout("local_tout_"+name+"_doMove"))   
					transition(edgeName="t01",targetState="execThePlan",cond=whenReply("stepdone"))
					transition(edgeName="t02",targetState="planko",cond=whenReply("stepfailed"))
				}	 
				state("end") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | end with CurMove=$CurMove")
						CommUtils.outblack("")
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("planko") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name | planko with CurPlan=$CurPlan")
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
