System smath24asynchfacade 
//mqttBroker "broker.hivemq.com" : 1883 eventTopic "servicemathouttopic" 
  
//Messages for the application  
Request dofibo   : dofibo(N) "to service"
Reply   fibodone : fibodone( CALLER,N,RESULT,ELABTIME ) for dofibo 

  
//Messages for the facademock         
Dispatch smathinfo : smathinfo( INFO )    
Dispatch usercmd   : usercmd( CMD )
   
Context ctxsmathfacade ip [host="localhost" port=8033]  
  
/* 
QActor display context ctxsmath {  //withobj d using "utils.DisplayObj.create()"
 	State s0 initial{		
	}
	Transition t0 whenMsg out -> handleout
	
	State handleout{
		printCurrentMessage color yellow
		[# val SOUT = "${currentMsg.msgContent()}" #]
		//[# d.write( SOUT ) #]
		c	
	} 
	Transition t0 whenMsg out -> handleout
}
*/

/*
 * SERVICE 
 */
QActor smathasynchfacade  context ctxsmathfacade {
	 
	State init initial { 
		println("$name  STARTS ") color blue		
	}	
	Transition t0 whenRequest dofibo -> work
	 
	State work{
		[#val CurMsg = currentMsg #]
		 printCurrentMessage 
         updateResource [# "$currentMsg" #]
	     delegateCurrentMsgTo actionexec
	}  
	Transition t0   whenRequest dofibo -> work

 }

QActor actionexec  context ctxsmathfacade withobj math using "MathUtils.create()" dynamicOnly{ 
	[# var CurRequestTime = 0L; var SOUT="todo" #]
	State init initial { 
		//println("$name | STARTS ")  color blue
    }	  
    Transition t0 whenRequest dofibo -> work
	 
	State work{
		printCurrentMessage color blue
		onMsg( dofibo : dofibo( N ) ){
			[#   
				var ReqArg  = payloadArg(0) 
 				var Sender  = currentMsg.msgSender() 
			#]  
			//println("$name | work N=$N ${sysUtil.curThread()}") color blue
			[# 
			   val T0 = getCurrentTime()  
 			   var F  = math.fibo( ReqArg.toInt() )  
 			   val TF = getDuration(T0)   
    		   SOUT   = "fibovalue($ReqArg , $F,  $TF)" 
			#]
 			println("$SOUT") color cyan 
			//forward display -m out : out($SOUT)
			updateResource [# "$SOUT" #]
			replyTo dofibo with fibodone : fibodone($Sender, $ReqArg, $F,  $TF)
 			//CALLER,N,RESULT,ELABTIME
			terminate 0 
 		} 
	} 
 }
     
QActor facademock context ctxsmathfacade withobj math using "MathUtils.create()"{
	[# var N = 0  
	 
    fun waitUserCmd( prompt: String    ) : Int {
		try {
			val read  = java.util.Scanner(System.`in`)  
		    //CommUtils.outgreen("$read  ")
		    //CommUtils.outgreen("$prompt>>>  ")
		    val V = read.nextLine()  //No line found
 			println("$V")
 			return V.toInt()
		} catch (e: java.lang.Exception) {
			CommUtils.outred("ERROR: ${e} ")
			return 1
		}
	}
		 
//    thread(start = true) {  
//      println("running from thread(): ${Thread.currentThread()}")
//    }

//WARNING: Gradle also interacts with the console
Thread {
     println("running from thread(): ${Thread.currentThread()}")
     //waitUserCmd("N>>>")
     val V = readLine()
     println("$V")
}.start()

	#]
	State s0 initial { 
		println("$name | STARTS ")  color blue
		observeResource smathasynchfacade msgid smathinfo
    }   
    Goto getusercmd
    
    State getusercmd {
		//provides input gui that sends request dofibo to smathasynchfacade
		//and shows the answer
     	[#  val NS =  waitUserCmd( "Nfibo" ) #]    	
    	[#  N = NS.toInt() #]
//[# sysUtil.waitUser(">>", 10000L) #]
    	//if [# N > 0 #]{
    		autodispatch usercmd : usercmd($N)
    	//} 
    }
     Transition t0 
        whenMsg usercmd and [# N>0 #]   -> handleusercmd
        whenMsg usercmd and [# N<=0 #]  -> getusercmd
     	whenMsg smathinfo -> showinfo
    
    State handleusercmd{
    	printCurrentMessage color blue
    	onMsg( usercmd : usercmd(CMD)){
    		println("$name usercmd:${payloadArg(0)}") color blue
    		request  smathasynchfacade -m  dofibo : dofibo($N)
    	}
    }      
    Transition t0 
    	whenMsg smathinfo -> showinfo
    	whenReply fibodone -> showResult
    
    State showinfo {
    	printCurrentMessage color blue
    }
    Transition t0 
    	whenMsg smathinfo -> showinfo
    	whenReply fibodone -> showResult
    
    State showResult {
    	printCurrentMessage color blue
    }	
    Transition t0 
    	whenMsg smathinfo -> showinfo
    	whenReply fibodone -> showResult
}
 
//Facade f port 8088 usingactor smathasynchfacade inctx ctxsmath  
//                   appl "unibo.servicefacade24.Servicefacade24Application" 
//                   UserLibs -f "servicefacade24-1.0" -f "servicefacade24-1.0-plain"
	
