System mindear
Dispatch sensed : sensed(S,X)
Dispatch sound  : sound(X)
Dispatch work   : work(X)

Event   mindcmd  : mindcmd(X)   
Event   earmemo : earmemo(X)  

//Messages for the display 
Dispatch out  : out(S) 
Dispatch show : show(S)   

Context ctxmb ip [host="localhost" port=8045]  

QActor mind context ctxmb{
	State s0 initial{
		println("$name | STARTS ") color magenta
		observeResource ear msgid sensed
	}
	Transition t0 whenMsg sensed -> handlesensor
	
	
	State handlesensor{
		//printCurrentMessage color magenta
		[# var Data = "" 
		   var SOUT = ""
		#]
 
		onMsg( sensed : sensed( S, X  ) ){ //S=ear, X=sound($Data)
			[# val Source = payloadArg(0) 
			   Data       = payloadArg(1)   //sound($Data)
			#]
			if[# Data == "sound(1)" #]{
				[# SOUT = "sensor($Source, $Data)" #]
			}else{
				[# SOUT = "sensor($Source, ignore)" #]
			}
			emitlocalstream mindcmd : mindcmd($SOUT)
			println("$name $SOUT") color magenta
		}
	}
	Transition t0 whenMsg sensed -> handlesensor
}

/*
 * 
 */
QActor ear context ctxmb{
	[# var Data = "" #]
	State s0 initial{
		println("$name | STARTS ") color blue
		subscribeTo mind 
		//subscribeTo ear //???
	}
	Transition t0 whenMsg sound -> handlesoud
	
	State handlesoud{
		printCurrentMessage color blue
		onMsg( sound:sound(X)){
			[#  Data     =  payloadArg(0); 
				val SOUT = "sound($Data)"
			#]
			updateResource [# SOUT #]  //mind observer
			forward display -m out : out($SOUT)
		}
	}
	Transition t0 whenTime 400 -> elabdata  //< 400  
	              whenEvent mindcmd -> handlemind

	State elabdata{
			[# val SOUT = "$name, elabdata, ${Data}" #]		
			forward display -m out : out($SOUT)
			//println("$name elab since work | $SOUT") color blue				
	}
	Transition t0 whenMsg sound -> handlesoud
		              
	State handlemind{
		printCurrentMessage color blue	
		onMsg( mindcmd:mindcmd(X)){// X=sensor(ear, sound(1))
			[#  
				val m = payloadArg(0)  //sensor($Source, $Data) 
				//val mt = Term( m ) as Struct
				//val data = mt.get(1) //potrebbe essere ignore
				val SOUT = "$name, handlemind, ${m}"
			#]
			forward display -m out : out($SOUT)
			//println("$name handlemind | $SOUT") color blue				
		}
	}
	Transition t0 whenMsg sound -> handlesoud
 
}

 
/*
 * 
 */
QActor worldmock context ctxmb{
	State s0 initial{
		delay 2000 //the display must start ...
		println("$name | STARTS ") color cyan
		forward ear -m sound : sound(1)
		forward ear -m sound : sound(2)
	}
	
}

/*
 * 
 */
QActor display context ctxmb withobj d using "DisplayObj.create()"{  //
 	State s0 initial{		
	}
	Transition t0 whenMsg out  -> view
	              whenMsg show -> view
	
	State view{
		//printCurrentMessage color yellow
		[# val SOUT = "${currentMsg.msgContent()}" #] //inizia con out o con show
 		//println("$name | $SOUT ") color yellow
//		updateResource [# "$SOUT" #]
        [# d.write(SOUT) #] 
	} 
	Transition t0 whenMsg out  -> view
	              whenMsg show -> view
}
