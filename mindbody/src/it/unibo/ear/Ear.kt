/* Generated by AN DISI Unibo */ 
package it.unibo.ear

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Ear ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var Data = ""  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name | STARTS ")
						subscribeToLocalActor("mind") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="handlesoud",cond=whenDispatch("sound"))
				}	 
				state("handlesoud") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("sound(X)"), Term.createTerm("sound(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  Data     =  payloadArg(0); 
												val SOUT = "sound($Data)"
								updateResourceRep( SOUT  
								)
								forward("out", "out($SOUT)" ,"display" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_handlesoud", 
				 	 					  scope, context!!, "local_tout_"+name+"_handlesoud", 400.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t03",targetState="elabdata",cond=whenTimeout("local_tout_"+name+"_handlesoud"))   
					transition(edgeName="t04",targetState="handlemind",cond=whenEvent("mindcmd"))
				}	 
				state("elabdata") { //this:State
					action { //it:State
						 val SOUT = "$name, elabdata, ${Data}"  
						forward("out", "out($SOUT)" ,"display" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="handlesoud",cond=whenDispatch("sound"))
				}	 
				state("handlemind") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("mindcmd(X)"), Term.createTerm("mindcmd(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  
												val m = payloadArg(0)  //sensor($Source, $Data) 
												//val mt = Term( m ) as Struct
												//val data = mt.get(1) //potrebbe essere ignore
												val SOUT = "$name, handlemind, ${m}"
								forward("out", "out($SOUT)" ,"display" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="handlesoud",cond=whenDispatch("sound"))
				}	 
			}
		}
} 
