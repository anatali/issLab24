/* Generated by AN DISI Unibo */ 
package it.unibo.bodyexec

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Bodyexec ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | STARTS ")
						subscribeToLocalActor("body") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_work", 
				 	 					  scope, context!!, "local_tout_"+name+"_work", 500.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t07",targetState="forget",cond=whenTimeout("local_tout_"+name+"_work"))   
					transition(edgeName="t08",targetState="elab",cond=whenEvent("bodymemo"))
				}	 
				state("forget") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | forget ... ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_forget", 
				 	 					  scope, context!!, "local_tout_"+name+"_forget", 500.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t09",targetState="forget",cond=whenTimeout("local_tout_"+name+"_forget"))   
					transition(edgeName="t010",targetState="elab",cond=whenEvent("bodymemo"))
				}	 
				state("elab") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("bodymemo(X)"), Term.createTerm("bodymemo(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val SOUT = "$name, elab, ${payloadArg(0)}"  
								forward("out", "out($SOUT)" ,"display" ) 
								CommUtils.outgreen("$name elab since bodymemo | $SOUT")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 
