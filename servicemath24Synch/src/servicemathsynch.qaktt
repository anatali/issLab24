System /*-trace*/ servicemath24synch
mqttBroker "broker.hivemq.com" : 1883 eventTopic "servicemathouttopic" 
    
//Messages for the application 
Request dofibo   : dofibo(N) "richiesta al serivzio"
Reply   fibodone : fibodone( CALLER,N,RESULT,TIME ) for dofibo  "risposta"
 
Dispatch serverinfo : serverinfo( SOURCE, INFO ) "per observr"
Event out  : out(S) "info emessa dal servizio"
  
Context ctxservice ip [host="localhost" port=8011]     
    
   
QActor servicemath context ctxservice 
                withobj math using "MathUtils.create()"{ 
	State s0 initial{
		println("$name  STARTS ") color magenta
	}
	Transition t0 whenRequest dofibo -> handleRequest
	
	State handleRequest{
		[#val CurMsg = currentMsg #]
		emit out : out($CurMsg) 
		onMsg( dofibo : dofibo(N)){
			[#val N = payloadArg(0) 
              var Sender = currentMsg.msgSender()
			#]
			println("$name |  N=$N ") color magenta
			[# val T0 = getCurrentTime()    
		       var R = math.fibo( N.toInt() )  
			   val TF  = getDuration(T0)  
			#]
			 
			//[# val SOUT="servicemathresult($name,fibo($N),$R,$TF)" #]
			[# val SOUT="working($name,msgid(dofibo($N)),sender($Sender))" #]
			println("$name |  $SOUT ") color magenta 
			updateResource [# SOUT #]
			emit out : out($SOUT)
			replyTo dofibo with fibodone:fibodone($Sender,$N,$R,$TF)
		}
	} 
	Transition t0 whenRequest dofibo -> handleRequest
}//servicemath

/*    
QActor caller context ctxservice {  
	[# val N = 43 
	#]
 	State init initial { 
		delay 1000
		println("$name | request 1") color blue
		request servicemath -m dofibo : dofibo($N)
		//delay 3000
		println("$name | request 2") color blue
		request servicemath -m dofibo : dofibo(23)
	}	 
	Transition t0 whenReply fibodone -> fiboanswer
	
	State fiboanswer{
		printCurrentMessage color cyan
		onMsg(fibodone : fibodone( CALLER,V,R,T) ){
                [# 
                   val Sender = payloadArg(0)
                   val N = payloadArg(1)
                   val R = payloadArg(2)
                   val T = payloadArg(3)
                   val outS = "fiboanswer for N=${N} calledby ${Sender}:${R} time=${T}"
                   val SOUT = "$name | $outS "
                #]
            //forward display -m out : out($SOUT) 
			println(" $SOUT") color blue
		}   
	}
	Transition t0 whenReply fibodone -> fiboanswer
}


QActor serviceobserver context ctxservice { 
	State s0 initial { 
		observeResource servicemath msgid serverinfo
	}
	Transition t0 whenMsg serverinfo -> showServerInfo
	
	State showServerInfo{
		printCurrentMessage color green
		onMsg( serverinfo : serverinfo( SOURCE, INFO ) ){
			[#  
				val SOURCE = payloadArg(0) 
				val INFO  = payloadArg(1) 
			#]
			println( "$SOURCE, $INFO") color magenta
		}		
	}
	Transition t0 whenMsg serverinfo -> showServerInfo
}
*/

Facade f port 8088 usingactor servicemath inctx ctxservice  
                   appl "unibo.servicefacade24.Servicefacade24Application" 
                   UserLibs -f "servicefacade24-1.0" -f "servicefacade24-1.0-plain"
 
    