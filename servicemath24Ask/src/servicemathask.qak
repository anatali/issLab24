System /*-msglog  -trace */ servicemathask
//mqttBroker "broker.hivemq.com" : 1883

//Messages for the application 
Request dofibo   : dofibo(N)
Reply   fibodone : fibodone( CALLER,N,RESULT,TIME ) for dofibo
 
Request confirm   : confirm(X)
Reply   confirmed : confirmed(X) for confirm

Dispatch stop     : stop(X)
Dispatch doelab   : doelab(X)
 
//Messages for the display 
//Dispatch out  : out(S) 
//Dispatch show : show(S)         
  
Context ctxservice ip [host="localhost" port=8011]  

/* 
QActor display context ctxservice {  //withobj d using "utils.DisplayObj.create()"
 	State s0 initial{		
	}
	Transition t0 whenMsg out  -> view
	              whenMsg show -> view
 	
	State view{
		printCurrentMessage color yellow
		[# val SOUT = "${currentMsg.msgContent()}" #] //inizia con out o con show
		println("$name | $SOUT ") color yellow
		updateResource [# "$SOUT" #]
	} 
	Transition t0 whenMsg out  -> view
	              whenMsg show -> view
}
*/ 
/*
 */
 
QActor caller context ctxservice {  
 	State init initial { 
  		//[# sysUtil.waitUser( "HIT a CHAR TO START", 30000)#]
              delay 4000
              request servicemath -m dofibo : dofibo(43)
              request servicemath -m dofibo : dofibo(60)
              request servicemath -m dofibo : dofibo(47)
              request servicemath -m dofibo : dofibo(5)
	}	 
	Transition t0 whenReply fibodone  -> fiboanswer
	              whenRequest confirm -> handleAskFromreceiver
	
    State fiboanswer{
              //printCurrentMessage color magenta
              onMsg(fibodone : fibodone( CALLER,V,R,T) ){
              [#
                val Sender = payloadArg(0)
                val N = payloadArg(1)
                val R = payloadArg(2)
                val T = payloadArg(3)    
                val outS = "fiboanswer for N=${N} by ${Sender}:${R} time=${T}"    
                val SOUT = "$name | $outS"      
              #]
                println("$SOUT") color magenta              }   
            }
            Transition t0 whenReply fibodone -> fiboanswer
                          whenRequest confirm -> handleAskFromreceiver
            
            State handleAskFromreceiver{
              onMsg( confirm : confirm(N)){
                [# val N = payloadArg(0).toInt() #]
                if [# N > 45 && N < 55 #]{
                  replyTo confirm with confirmed : confirmed(yes)
                }else{
                  replyTo confirm with confirmed : confirmed(no)
                }
              }             
            }
            Transition t0 whenReply fibodone -> fiboanswer
                         whenRequest confirm -> handleAskFromreceiver
}


/*
 * SERVICE 
 */
QActor servicemath context ctxservice {
	 
	State init initial { 
		println("$name  STARTS ") color blue
		//delegate "dofibo" to actionexec  
		//NO, since actionexec is dynamicOnly
	}	
 	Transition t0 whenRequest dofibo    -> work
 		 
	State work{
		delegateCurrentMsgTo actionexec
//		onMsg( dofibo : dofibo(N) ){
//			[#  
//			   var ReqId  = currentMsg.msgId()
//			   var ReqArg = payloadArg(0)
//			   var Sender = currentMsg.msgSender()
//			#]
//			[# val SOUT = "$name | $ReqId $ReqArg Sender=$Sender" #]
//			println("$SOUT") color blue
//			//forward display -m out  : out(  $SOUT  )
//			delegateCurrentMsgTo actionexec
// 		}
	}  
	Transition t0   whenRequest dofibo    -> work

 }

/*
 * Ogni istanza lavora per una specifica richiesta
 */
QActor actionexec  context ctxservice withobj math using "MathUtils.create()" dynamicOnly{
	[# var N      = 0 
	   var Sender = ""		
	#]  
	State init initial {
		//println("$name | STARTS ")  color cyan
    }	 
    Transition t0 whenRequest dofibo -> work
	
	State work{
		printCurrentMessage color green
		onMsg( dofibo : dofibo( N ) ){
			[#   
				N       = payloadArg(0).toInt()
 				Sender  = currentMsg.msgSender() 
			#]  
			
			if [# N > 43 #]{
				ask confirm : confirm($N) forrequest dofibo
			}
			else{
				autodispatch doelab : doelab($N)  
				//[# forward("doelab", "doelab($N)" , name ) #]
				//println("$name | work N=$N ${sysUtil.curThread()}") color blue
			}
		} 
	}
	Transition t0 whenTime 3000 -> confirmtout  //cambia currentMsg
				  whenReply confirmed -> checkelab
	              whenMsg doelab      -> elab
	
	State checkelab{
		onMsg( confirmed : confirmed( X ) ){
//			[# val Arg = payloadArg(0) #]
			if [# payloadArg(0) == "yes"#]{  
			  println("confirmed $name $N" ) color blue
 			  autodispatch doelab : doelab($N) 
			  //[# forward("doelab", "doelab($N)" , name ) #]			  
//				[# 
//					//val ReqArg = payloadArg(0)
//					val T0  = getCurrentTime()  
//			 		var F   = math.fibo( N )  
//			 	    val TF  = getDuration(T0)  
//			 	    val SOUT = "$name, fibo($N), $F, time=$TF" 
//				#]
//				println("$SOUT") color cyan
//	//			forward display -m show : show($SOUT)
//				replyTo dofibo with fibodone : fibodone($Sender, $N, $F, $TF)
//			 			   
//				terminate 0
			}else{
				[# val SOUT = "$name, fibo($N), NOT confirmed" #]
				println( SOUT ) color blue
				terminate 0		 
			    [# var anames = sysUtil.getAllActorNames(context!!.name) #]
			    println("$name | AFTER: $anames")			  	
			}
		}
	}
	Transition t0  whenMsg doelab  -> elab 
	
	State elab{
		onMsg( doelab : doelab( N ) ){
			[# 
				val ReqArg = payloadArg(0)
				val T0  = getCurrentTime()  
		 		var F   = math.fibo( ReqArg.toInt() )  
		 	    val TF  = getDuration(T0)  
		 	    val SOUT = "$name, fibo($ReqArg), $F, time=$TF" 
			#]
			println("$SOUT") color blue
//			forward display -m show : show($SOUT)
			replyTo dofibo with fibodone : fibodone($Sender, $ReqArg, $F, $TF)
		 			   
			terminate 0
 		 
//			[# var anames = sysUtil.getAllActorNames(context!!.name) #]
//			println("$name | AFTER: $anames")		
		}
 	}
 	 
 	State confirmtout{
// 		println("$name | confirmtout Sender=$Sender N=$N")
// 		[# val F   =  0; val TF  = 3000 #]
// 		//replyTo dofibo with fibodone : fibodone($Sender, $N, $F, $TF)
 		println("$name | confirmtout TERMINATED without sending answer") color blue
 		terminate 0
 	}
 }  
        

//DisplayHTML d port 8088 usingactor servicemath inctx ctxservice 
//                   appl "unibo.servicefacade24.Servicefacade24Application" 
//                   UserLibs -f "servicefacade24-1.0" -f "servicefacade24-1.0-plain"

Facade f port 8088 usingactor servicemath inctx ctxservice  
                   appl "unibo.servicefacade24.Servicefacade24Application" 
                   UserLibs -f "servicefacade24-1.0" -f "servicefacade24-1.0-plain"

